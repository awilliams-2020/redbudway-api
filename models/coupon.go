// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Coupon coupon
//
// swagger:model Coupon
type Coupon struct {

	// amount
	Amount float64 `json:"amount,omitempty"`

	// duration
	Duration string `json:"duration,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// limited time
	LimitedTime bool `json:"limitedTime"`

	// max redemption
	MaxRedemption bool `json:"maxRedemption"`

	// max redemptions
	MaxRedemptions int64 `json:"maxRedemptions,omitempty"`

	// months
	Months int64 `json:"months,omitempty"`

	// name
	// Max Length: 40
	Name string `json:"name,omitempty"`

	// percent
	Percent float64 `json:"percent,omitempty"`

	// promos
	Promos []*Promo `json:"promos"`

	// redeem by
	RedeemBy string `json:"redeemBy,omitempty"`

	// services
	Services []string `json:"services"`

	// subscriptions
	Subscriptions bool `json:"subscriptions"`

	// times redeemed
	TimesRedeemed int64 `json:"timesRedeemed"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this coupon
func (m *Coupon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Coupon) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 40); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validatePromos(formats strfmt.Registry) error {
	if swag.IsZero(m.Promos) { // not required
		return nil
	}

	for i := 0; i < len(m.Promos); i++ {
		if swag.IsZero(m.Promos[i]) { // not required
			continue
		}

		if m.Promos[i] != nil {
			if err := m.Promos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("promos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("promos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this coupon based on the context it is used
func (m *Coupon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePromos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Coupon) contextValidatePromos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Promos); i++ {

		if m.Promos[i] != nil {
			if err := m.Promos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("promos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("promos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Coupon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Coupon) UnmarshalBinary(b []byte) error {
	var res Coupon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
