// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDetails service details
//
// swagger:model ServiceDetails
type ServiceDetails struct {

	// archived
	Archived bool `json:"archived"`

	// category
	// Required: true
	Category *string `json:"category"`

	// description
	// Required: true
	Description *string `json:"description"`

	// excludes
	Excludes []string `json:"excludes"`

	// filters
	// Required: true
	Filters []string `json:"filters"`

	// id
	ID int64 `json:"id,omitempty"`

	// images
	// Required: true
	Images []string `json:"images"`

	// includes
	Includes []string `json:"includes"`

	// interval
	Interval string `json:"interval"`

	// price
	Price float64 `json:"price"`

	// price Id
	PriceID string `json:"priceId,omitempty"`

	// quote Id
	QuoteID string `json:"quoteId,omitempty"`

	// rating
	Rating float64 `json:"rating"`

	// reviews
	Reviews int64 `json:"reviews"`

	// select places
	// Required: true
	SelectPlaces *bool `json:"selectPlaces"`

	// states and cities
	StatesAndCities []*ServiceDetailsStatesAndCitiesItems0 `json:"statesAndCities"`

	// sub category
	SubCategory string `json:"subCategory,omitempty"`

	// subscription
	Subscription bool `json:"subscription"`

	// time slots
	TimeSlots []*TimeSlot `json:"timeSlots"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this service details
func (m *ServiceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectPlaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatesAndCities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDetails) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDetails) validateFilters(formats strfmt.Registry) error {

	if err := validate.Required("filters", "body", m.Filters); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDetails) validateImages(formats strfmt.Registry) error {

	if err := validate.Required("images", "body", m.Images); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDetails) validateSelectPlaces(formats strfmt.Registry) error {

	if err := validate.Required("selectPlaces", "body", m.SelectPlaces); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDetails) validateStatesAndCities(formats strfmt.Registry) error {
	if swag.IsZero(m.StatesAndCities) { // not required
		return nil
	}

	for i := 0; i < len(m.StatesAndCities); i++ {
		if swag.IsZero(m.StatesAndCities[i]) { // not required
			continue
		}

		if m.StatesAndCities[i] != nil {
			if err := m.StatesAndCities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statesAndCities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statesAndCities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDetails) validateTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSlots) { // not required
		return nil
	}

	for i := 0; i < len(m.TimeSlots); i++ {
		if swag.IsZero(m.TimeSlots[i]) { // not required
			continue
		}

		if m.TimeSlots[i] != nil {
			if err := m.TimeSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDetails) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service details based on the context it is used
func (m *ServiceDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatesAndCities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDetails) contextValidateStatesAndCities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatesAndCities); i++ {

		if m.StatesAndCities[i] != nil {
			if err := m.StatesAndCities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statesAndCities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statesAndCities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDetails) contextValidateTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeSlots); i++ {

		if m.TimeSlots[i] != nil {
			if err := m.TimeSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDetails) UnmarshalBinary(b []byte) error {
	var res ServiceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceDetailsStatesAndCitiesItems0 service details states and cities items0
//
// swagger:model ServiceDetailsStatesAndCitiesItems0
type ServiceDetailsStatesAndCitiesItems0 struct {

	// cities
	Cities []*ServiceDetailsStatesAndCitiesItems0CitiesItems0 `json:"cities"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this service details states and cities items0
func (m *ServiceDetailsStatesAndCitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDetailsStatesAndCitiesItems0) validateCities(formats strfmt.Registry) error {
	if swag.IsZero(m.Cities) { // not required
		return nil
	}

	for i := 0; i < len(m.Cities); i++ {
		if swag.IsZero(m.Cities[i]) { // not required
			continue
		}

		if m.Cities[i] != nil {
			if err := m.Cities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service details states and cities items0 based on the context it is used
func (m *ServiceDetailsStatesAndCitiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDetailsStatesAndCitiesItems0) contextValidateCities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cities); i++ {

		if m.Cities[i] != nil {
			if err := m.Cities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDetailsStatesAndCitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDetailsStatesAndCitiesItems0) UnmarshalBinary(b []byte) error {
	var res ServiceDetailsStatesAndCitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceDetailsStatesAndCitiesItems0CitiesItems0 service details states and cities items0 cities items0
//
// swagger:model ServiceDetailsStatesAndCitiesItems0CitiesItems0
type ServiceDetailsStatesAndCitiesItems0CitiesItems0 struct {

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this service details states and cities items0 cities items0
func (m *ServiceDetailsStatesAndCitiesItems0CitiesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service details states and cities items0 cities items0 based on context it is used
func (m *ServiceDetailsStatesAndCitiesItems0CitiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDetailsStatesAndCitiesItems0CitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDetailsStatesAndCitiesItems0CitiesItems0) UnmarshalBinary(b []byte) error {
	var res ServiceDetailsStatesAndCitiesItems0CitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
