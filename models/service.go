// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Service service
//
// swagger:model Service
type Service struct {

	// archived
	Archived bool `json:"archived,omitempty"`

	// available time slots
	AvailableTimeSlots int64 `json:"availableTimeSlots"`

	// business
	Business *Business `json:"business,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// interval
	Interval string `json:"interval"`

	// jobs
	Jobs int64 `json:"jobs"`

	// price
	Price float64 `json:"price"`

	// price Id
	PriceID string `json:"priceId,omitempty"`

	// quote Id
	QuoteID string `json:"quoteId,omitempty"`

	// rating
	Rating float64 `json:"rating"`

	// repeat
	Repeat int64 `json:"repeat"`

	// reviews
	Reviews int64 `json:"reviews"`

	// subscription
	Subscription bool `json:"subscription"`

	// title
	Title string `json:"title,omitempty"`

	// tradesperson Id
	TradespersonID string `json:"tradespersonId,omitempty"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusiness(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateBusiness(formats strfmt.Registry) error {
	if swag.IsZero(m.Business) { // not required
		return nil
	}

	if m.Business != nil {
		if err := m.Business.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service based on the context it is used
func (m *Service) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusiness(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) contextValidateBusiness(ctx context.Context, formats strfmt.Registry) error {

	if m.Business != nil {
		if err := m.Business.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
