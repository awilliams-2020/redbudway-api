// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
//
// swagger:model Service
type Service struct {

	// available time slots
	AvailableTimeSlots int64 `json:"availableTimeSlots"`

	// business
	Business string `json:"business,omitempty"`

	// image
	// Required: true
	Image *string `json:"image"`

	// interval
	Interval string `json:"interval"`

	// price
	Price float64 `json:"price,omitempty"`

	// price Id
	PriceID string `json:"priceId,omitempty"`

	// quote Id
	QuoteID string `json:"quoteId,omitempty"`

	// rating
	Rating float64 `json:"rating"`

	// reviews
	Reviews int64 `json:"reviews"`

	// subscription
	Subscription bool `json:"subscription"`

	// title
	// Required: true
	Title *string `json:"title"`

	// tradesperson Id
	TradespersonID string `json:"tradespersonId,omitempty"`

	// vanity URL
	VanityURL string `json:"vanityURL"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service based on context it is used
func (m *Service) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
