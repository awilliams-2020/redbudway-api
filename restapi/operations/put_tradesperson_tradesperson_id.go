// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutTradespersonTradespersonIDHandlerFunc turns a function with the right signature into a put tradesperson tradesperson ID handler
type PutTradespersonTradespersonIDHandlerFunc func(PutTradespersonTradespersonIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTradespersonTradespersonIDHandlerFunc) Handle(params PutTradespersonTradespersonIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutTradespersonTradespersonIDHandler interface for that can handle valid put tradesperson tradesperson ID params
type PutTradespersonTradespersonIDHandler interface {
	Handle(PutTradespersonTradespersonIDParams, interface{}) middleware.Responder
}

// NewPutTradespersonTradespersonID creates a new http.Handler for the put tradesperson tradesperson ID operation
func NewPutTradespersonTradespersonID(ctx *middleware.Context, handler PutTradespersonTradespersonIDHandler) *PutTradespersonTradespersonID {
	return &PutTradespersonTradespersonID{Context: ctx, Handler: handler}
}

/* PutTradespersonTradespersonID swagger:route PUT /tradesperson/{tradespersonId} putTradespersonTradespersonId

PutTradespersonTradespersonID put tradesperson tradesperson ID API

*/
type PutTradespersonTradespersonID struct {
	Context *middleware.Context
	Handler PutTradespersonTradespersonIDHandler
}

func (o *PutTradespersonTradespersonID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTradespersonTradespersonIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutTradespersonTradespersonIDBody put tradesperson tradesperson ID body
//
// swagger:model PutTradespersonTradespersonIDBody
type PutTradespersonTradespersonIDBody struct {

	// description
	Description string `json:"description,omitempty"`

	// image
	Image string `json:"image,omitempty"`
}

// Validate validates this put tradesperson tradesperson ID body
func (o *PutTradespersonTradespersonIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put tradesperson tradesperson ID body based on context it is used
func (o *PutTradespersonTradespersonIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDBody) UnmarshalBinary(b []byte) error {
	var res PutTradespersonTradespersonIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTradespersonTradespersonIDOKBody put tradesperson tradesperson ID o k body
//
// swagger:model PutTradespersonTradespersonIDOKBody
type PutTradespersonTradespersonIDOKBody struct {

	// updated
	Updated bool `json:"updated"`
}

// Validate validates this put tradesperson tradesperson ID o k body
func (o *PutTradespersonTradespersonIDOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put tradesperson tradesperson ID o k body based on context it is used
func (o *PutTradespersonTradespersonIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutTradespersonTradespersonIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
