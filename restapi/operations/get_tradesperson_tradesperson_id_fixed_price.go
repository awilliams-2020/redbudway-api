// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// GetTradespersonTradespersonIDFixedPriceHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID fixed price handler
type GetTradespersonTradespersonIDFixedPriceHandlerFunc func(GetTradespersonTradespersonIDFixedPriceParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDFixedPriceHandlerFunc) Handle(params GetTradespersonTradespersonIDFixedPriceParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTradespersonTradespersonIDFixedPriceHandler interface for that can handle valid get tradesperson tradesperson ID fixed price params
type GetTradespersonTradespersonIDFixedPriceHandler interface {
	Handle(GetTradespersonTradespersonIDFixedPriceParams, interface{}) middleware.Responder
}

// NewGetTradespersonTradespersonIDFixedPrice creates a new http.Handler for the get tradesperson tradesperson ID fixed price operation
func NewGetTradespersonTradespersonIDFixedPrice(ctx *middleware.Context, handler GetTradespersonTradespersonIDFixedPriceHandler) *GetTradespersonTradespersonIDFixedPrice {
	return &GetTradespersonTradespersonIDFixedPrice{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDFixedPrice swagger:route GET /tradesperson/{tradespersonId}/fixed-price getTradespersonTradespersonIdFixedPrice

GetTradespersonTradespersonIDFixedPrice get tradesperson tradesperson ID fixed price API

*/
type GetTradespersonTradespersonIDFixedPrice struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDFixedPriceHandler
}

func (o *GetTradespersonTradespersonIDFixedPrice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDFixedPriceParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDFixedPriceOKBody get tradesperson tradesperson ID fixed price o k body
//
// swagger:model GetTradespersonTradespersonIDFixedPriceOKBody
type GetTradespersonTradespersonIDFixedPriceOKBody struct {

	// fixed price
	FixedPrice *models.ServiceDetails `json:"fixedPrice,omitempty"`

	// other services
	OtherServices models.OtherServices `json:"otherServices"`
}

// Validate validates this get tradesperson tradesperson ID fixed price o k body
func (o *GetTradespersonTradespersonIDFixedPriceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFixedPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOtherServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDFixedPriceOKBody) validateFixedPrice(formats strfmt.Registry) error {
	if swag.IsZero(o.FixedPrice) { // not required
		return nil
	}

	if o.FixedPrice != nil {
		if err := o.FixedPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "fixedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "fixedPrice")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDFixedPriceOKBody) validateOtherServices(formats strfmt.Registry) error {
	if swag.IsZero(o.OtherServices) { // not required
		return nil
	}

	if err := o.OtherServices.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "otherServices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "otherServices")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID fixed price o k body based on the context it is used
func (o *GetTradespersonTradespersonIDFixedPriceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFixedPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOtherServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDFixedPriceOKBody) contextValidateFixedPrice(ctx context.Context, formats strfmt.Registry) error {

	if o.FixedPrice != nil {
		if err := o.FixedPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "fixedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "fixedPrice")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDFixedPriceOKBody) contextValidateOtherServices(ctx context.Context, formats strfmt.Registry) error {

	if err := o.OtherServices.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "otherServices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getTradespersonTradespersonIdFixedPriceOK" + "." + "otherServices")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDFixedPriceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDFixedPriceOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDFixedPriceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
