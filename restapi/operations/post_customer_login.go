// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostCustomerLoginHandlerFunc turns a function with the right signature into a post customer login handler
type PostCustomerLoginHandlerFunc func(PostCustomerLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCustomerLoginHandlerFunc) Handle(params PostCustomerLoginParams) middleware.Responder {
	return fn(params)
}

// PostCustomerLoginHandler interface for that can handle valid post customer login params
type PostCustomerLoginHandler interface {
	Handle(PostCustomerLoginParams) middleware.Responder
}

// NewPostCustomerLogin creates a new http.Handler for the post customer login operation
func NewPostCustomerLogin(ctx *middleware.Context, handler PostCustomerLoginHandler) *PostCustomerLogin {
	return &PostCustomerLogin{Context: ctx, Handler: handler}
}

/* PostCustomerLogin swagger:route POST /customer/login postCustomerLogin

PostCustomerLogin post customer login API

*/
type PostCustomerLogin struct {
	Context *middleware.Context
	Handler PostCustomerLoginHandler
}

func (o *PostCustomerLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCustomerLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCustomerLoginBody post customer login body
//
// swagger:model PostCustomerLoginBody
type PostCustomerLoginBody struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this post customer login body
func (o *PostCustomerLoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerLoginBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("customer"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostCustomerLoginBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post customer login body based on context it is used
func (o *PostCustomerLoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerLoginBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCustomerLoginOKBody post customer login o k body
//
// swagger:model PostCustomerLoginOKBody
type PostCustomerLoginOKBody struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// customer Id
	CustomerID string `json:"customerId,omitempty"`

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// valid
	Valid bool `json:"valid"`
}

// Validate validates this post customer login o k body
func (o *PostCustomerLoginOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post customer login o k body based on context it is used
func (o *PostCustomerLoginOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerLoginOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerLoginOKBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerLoginOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
