// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProfileVanityOrIDFixedPricesHandlerFunc turns a function with the right signature into a get profile vanity or ID fixed prices handler
type GetProfileVanityOrIDFixedPricesHandlerFunc func(GetProfileVanityOrIDFixedPricesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProfileVanityOrIDFixedPricesHandlerFunc) Handle(params GetProfileVanityOrIDFixedPricesParams) middleware.Responder {
	return fn(params)
}

// GetProfileVanityOrIDFixedPricesHandler interface for that can handle valid get profile vanity or ID fixed prices params
type GetProfileVanityOrIDFixedPricesHandler interface {
	Handle(GetProfileVanityOrIDFixedPricesParams) middleware.Responder
}

// NewGetProfileVanityOrIDFixedPrices creates a new http.Handler for the get profile vanity or ID fixed prices operation
func NewGetProfileVanityOrIDFixedPrices(ctx *middleware.Context, handler GetProfileVanityOrIDFixedPricesHandler) *GetProfileVanityOrIDFixedPrices {
	return &GetProfileVanityOrIDFixedPrices{Context: ctx, Handler: handler}
}

/* GetProfileVanityOrIDFixedPrices swagger:route GET /profile/{vanityOrId}/fixed-prices getProfileVanityOrIdFixedPrices

GetProfileVanityOrIDFixedPrices get profile vanity or ID fixed prices API

*/
type GetProfileVanityOrIDFixedPrices struct {
	Context *middleware.Context
	Handler GetProfileVanityOrIDFixedPricesHandler
}

func (o *GetProfileVanityOrIDFixedPrices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetProfileVanityOrIDFixedPricesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
