// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostResetPasswordHandlerFunc turns a function with the right signature into a post reset password handler
type PostResetPasswordHandlerFunc func(PostResetPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostResetPasswordHandlerFunc) Handle(params PostResetPasswordParams) middleware.Responder {
	return fn(params)
}

// PostResetPasswordHandler interface for that can handle valid post reset password params
type PostResetPasswordHandler interface {
	Handle(PostResetPasswordParams) middleware.Responder
}

// NewPostResetPassword creates a new http.Handler for the post reset password operation
func NewPostResetPassword(ctx *middleware.Context, handler PostResetPasswordHandler) *PostResetPassword {
	return &PostResetPassword{Context: ctx, Handler: handler}
}

/* PostResetPassword swagger:route POST /reset-password postResetPassword

PostResetPassword post reset password API

*/
type PostResetPassword struct {
	Context *middleware.Context
	Handler PostResetPasswordHandler
}

func (o *PostResetPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostResetPasswordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostResetPasswordBody post reset password body
//
// swagger:model PostResetPasswordBody
type PostResetPasswordBody struct {

	// password
	// Required: true
	Password *string `json:"password"`

	// token
	// Required: true
	Token *string `json:"token"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this post reset password body
func (o *PostResetPasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostResetPasswordBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password."+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *PostResetPasswordBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("password."+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

func (o *PostResetPasswordBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("password."+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post reset password body based on context it is used
func (o *PostResetPasswordBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostResetPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostResetPasswordBody) UnmarshalBinary(b []byte) error {
	var res PostResetPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostResetPasswordOKBody post reset password o k body
//
// swagger:model PostResetPasswordOKBody
type PostResetPasswordOKBody struct {

	// updated
	Updated bool `json:"updated,omitempty"`
}

// Validate validates this post reset password o k body
func (o *PostResetPasswordOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post reset password o k body based on context it is used
func (o *PostResetPasswordOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostResetPasswordOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostResetPasswordOKBody) UnmarshalBinary(b []byte) error {
	var res PostResetPasswordOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
