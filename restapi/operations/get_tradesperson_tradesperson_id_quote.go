// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTradespersonTradespersonIDQuoteHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID quote handler
type GetTradespersonTradespersonIDQuoteHandlerFunc func(GetTradespersonTradespersonIDQuoteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDQuoteHandlerFunc) Handle(params GetTradespersonTradespersonIDQuoteParams) middleware.Responder {
	return fn(params)
}

// GetTradespersonTradespersonIDQuoteHandler interface for that can handle valid get tradesperson tradesperson ID quote params
type GetTradespersonTradespersonIDQuoteHandler interface {
	Handle(GetTradespersonTradespersonIDQuoteParams) middleware.Responder
}

// NewGetTradespersonTradespersonIDQuote creates a new http.Handler for the get tradesperson tradesperson ID quote operation
func NewGetTradespersonTradespersonIDQuote(ctx *middleware.Context, handler GetTradespersonTradespersonIDQuoteHandler) *GetTradespersonTradespersonIDQuote {
	return &GetTradespersonTradespersonIDQuote{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDQuote swagger:route GET /tradesperson/{tradespersonId}/quote getTradespersonTradespersonIdQuote

GetTradespersonTradespersonIDQuote get tradesperson tradesperson ID quote API

*/
type GetTradespersonTradespersonIDQuote struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDQuoteHandler
}

func (o *GetTradespersonTradespersonIDQuote) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDQuoteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDQuoteOKBody get tradesperson tradesperson ID quote o k body
//
// swagger:model GetTradespersonTradespersonIDQuoteOKBody
type GetTradespersonTradespersonIDQuoteOKBody struct {

	// archived
	Archived bool `json:"archived,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// city map
	CityMap []*GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0 `json:"cityMap"`

	// description
	Description string `json:"description,omitempty"`

	// filters
	Filters []string `json:"filters"`

	// images
	Images []string `json:"images"`

	// select places
	SelectPlaces bool `json:"selectPlaces,omitempty"`

	// sub category
	SubCategory string `json:"subCategory,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID quote o k body
func (o *GetTradespersonTradespersonIDQuoteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCityMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDQuoteOKBody) validateCityMap(formats strfmt.Registry) error {
	if swag.IsZero(o.CityMap) { // not required
		return nil
	}

	for i := 0; i < len(o.CityMap); i++ {
		if swag.IsZero(o.CityMap[i]) { // not required
			continue
		}

		if o.CityMap[i] != nil {
			if err := o.CityMap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdQuoteOK" + "." + "cityMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdQuoteOK" + "." + "cityMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID quote o k body based on the context it is used
func (o *GetTradespersonTradespersonIDQuoteOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCityMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDQuoteOKBody) contextValidateCityMap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CityMap); i++ {

		if o.CityMap[i] != nil {
			if err := o.CityMap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdQuoteOK" + "." + "cityMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdQuoteOK" + "." + "cityMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDQuoteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDQuoteOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDQuoteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0 get tradesperson tradesperson ID quote o k body city map items0
//
// swagger:model GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0
type GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0 struct {

	// cities
	Cities []string `json:"cities"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID quote o k body city map items0
func (o *GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get tradesperson tradesperson ID quote o k body city map items0 based on context it is used
func (o *GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDQuoteOKBodyCityMapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
