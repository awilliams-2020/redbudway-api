// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetTradespersonTradespersonIDBillingInvoicesParams creates a new GetTradespersonTradespersonIDBillingInvoicesParams object
//
// There are no default values defined in the spec.
func NewGetTradespersonTradespersonIDBillingInvoicesParams() GetTradespersonTradespersonIDBillingInvoicesParams {

	return GetTradespersonTradespersonIDBillingInvoicesParams{}
}

// GetTradespersonTradespersonIDBillingInvoicesParams contains all the bound params for the get tradesperson tradesperson ID billing invoices operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetTradespersonTradespersonIDBillingInvoices
type GetTradespersonTradespersonIDBillingInvoicesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Quarter of the year
	  Required: true
	  In: query
	*/
	Quarter string
	/*Tradesperson ID
	  Required: true
	  In: path
	*/
	TradespersonID int64
	/*Year of invoice
	  Required: true
	  In: query
	*/
	Year string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetTradespersonTradespersonIDBillingInvoicesParams() beforehand.
func (o *GetTradespersonTradespersonIDBillingInvoicesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qQuarter, qhkQuarter, _ := qs.GetOK("quarter")
	if err := o.bindQuarter(qQuarter, qhkQuarter, route.Formats); err != nil {
		res = append(res, err)
	}

	rTradespersonID, rhkTradespersonID, _ := route.Params.GetOK("tradespersonId")
	if err := o.bindTradespersonID(rTradespersonID, rhkTradespersonID, route.Formats); err != nil {
		res = append(res, err)
	}

	qYear, qhkYear, _ := qs.GetOK("year")
	if err := o.bindYear(qYear, qhkYear, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindQuarter binds and validates parameter Quarter from query.
func (o *GetTradespersonTradespersonIDBillingInvoicesParams) bindQuarter(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("quarter", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("quarter", "query", raw); err != nil {
		return err
	}
	o.Quarter = raw

	return nil
}

// bindTradespersonID binds and validates parameter TradespersonID from path.
func (o *GetTradespersonTradespersonIDBillingInvoicesParams) bindTradespersonID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("tradespersonId", "path", "int64", raw)
	}
	o.TradespersonID = value

	return nil
}

// bindYear binds and validates parameter Year from query.
func (o *GetTradespersonTradespersonIDBillingInvoicesParams) bindYear(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("year", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("year", "query", raw); err != nil {
		return err
	}
	o.Year = raw

	return nil
}
