// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandlerFunc turns a function with the right signature into a post tradesperson tradesperson ID billing customer subscription refund handler
type PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandlerFunc func(PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandlerFunc) Handle(params PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundParams) middleware.Responder {
	return fn(params)
}

// PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler interface for that can handle valid post tradesperson tradesperson ID billing customer subscription refund params
type PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler interface {
	Handle(PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundParams) middleware.Responder
}

// NewPostTradespersonTradespersonIDBillingCustomerSubscriptionRefund creates a new http.Handler for the post tradesperson tradesperson ID billing customer subscription refund operation
func NewPostTradespersonTradespersonIDBillingCustomerSubscriptionRefund(ctx *middleware.Context, handler PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler) *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund {
	return &PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund{Context: ctx, Handler: handler}
}

/* PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund swagger:route POST /tradesperson/{tradespersonId}/billing/customer/subscription/refund postTradespersonTradespersonIdBillingCustomerSubscriptionRefund

PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund post tradesperson tradesperson ID billing customer subscription refund API

*/
type PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund struct {
	Context *middleware.Context
	Handler PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler
}

func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTradespersonTradespersonIDBillingCustomerSubscriptionRefundParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody post tradesperson tradesperson ID billing customer subscription refund body
//
// swagger:model PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody
type PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody struct {

	// subscription Id
	// Required: true
	SubscriptionID *string `json:"subscriptionId"`
}

// Validate validates this post tradesperson tradesperson ID billing customer subscription refund body
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscription"+"."+"subscriptionId", "body", o.SubscriptionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post tradesperson tradesperson ID billing customer subscription refund body based on context it is used
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody post tradesperson tradesperson ID billing customer subscription refund o k body
//
// swagger:model PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody
type PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody struct {

	// refunded
	Refunded bool `json:"refunded,omitempty"`
}

// Validate validates this post tradesperson tradesperson ID billing customer subscription refund o k body
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post tradesperson tradesperson ID billing customer subscription refund o k body based on context it is used
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
