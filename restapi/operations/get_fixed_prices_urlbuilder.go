// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetFixedPricesURL generates an URL for the get fixed prices operation
type GetFixedPricesURL struct {
	Category    *string
	City        *string
	FromDate    *string
	Max         *int64
	Min         *int64
	Page        *int64
	Sort        *string
	Specialties *string
	State       *string
	SubCategory *string
	ToDate      *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetFixedPricesURL) WithBasePath(bp string) *GetFixedPricesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetFixedPricesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetFixedPricesURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/fixed-prices"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var categoryQ string
	if o.Category != nil {
		categoryQ = *o.Category
	}
	if categoryQ != "" {
		qs.Set("category", categoryQ)
	}

	var cityQ string
	if o.City != nil {
		cityQ = *o.City
	}
	if cityQ != "" {
		qs.Set("city", cityQ)
	}

	var fromDateQ string
	if o.FromDate != nil {
		fromDateQ = *o.FromDate
	}
	if fromDateQ != "" {
		qs.Set("fromDate", fromDateQ)
	}

	var maxQ string
	if o.Max != nil {
		maxQ = swag.FormatInt64(*o.Max)
	}
	if maxQ != "" {
		qs.Set("max", maxQ)
	}

	var minQ string
	if o.Min != nil {
		minQ = swag.FormatInt64(*o.Min)
	}
	if minQ != "" {
		qs.Set("min", minQ)
	}

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var sortQ string
	if o.Sort != nil {
		sortQ = *o.Sort
	}
	if sortQ != "" {
		qs.Set("sort", sortQ)
	}

	var specialtiesQ string
	if o.Specialties != nil {
		specialtiesQ = *o.Specialties
	}
	if specialtiesQ != "" {
		qs.Set("specialties", specialtiesQ)
	}

	var stateQ string
	if o.State != nil {
		stateQ = *o.State
	}
	if stateQ != "" {
		qs.Set("state", stateQ)
	}

	var subCategoryQ string
	if o.SubCategory != nil {
		subCategoryQ = *o.SubCategory
	}
	if subCategoryQ != "" {
		qs.Set("subCategory", subCategoryQ)
	}

	var toDateQ string
	if o.ToDate != nil {
		toDateQ = *o.ToDate
	}
	if toDateQ != "" {
		qs.Set("toDate", toDateQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetFixedPricesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetFixedPricesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetFixedPricesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetFixedPricesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetFixedPricesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetFixedPricesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
