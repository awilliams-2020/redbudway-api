// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// GetCustomerCustomerIDQuoteQuoteIDHandlerFunc turns a function with the right signature into a get customer customer ID quote quote ID handler
type GetCustomerCustomerIDQuoteQuoteIDHandlerFunc func(GetCustomerCustomerIDQuoteQuoteIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCustomerCustomerIDQuoteQuoteIDHandlerFunc) Handle(params GetCustomerCustomerIDQuoteQuoteIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCustomerCustomerIDQuoteQuoteIDHandler interface for that can handle valid get customer customer ID quote quote ID params
type GetCustomerCustomerIDQuoteQuoteIDHandler interface {
	Handle(GetCustomerCustomerIDQuoteQuoteIDParams, interface{}) middleware.Responder
}

// NewGetCustomerCustomerIDQuoteQuoteID creates a new http.Handler for the get customer customer ID quote quote ID operation
func NewGetCustomerCustomerIDQuoteQuoteID(ctx *middleware.Context, handler GetCustomerCustomerIDQuoteQuoteIDHandler) *GetCustomerCustomerIDQuoteQuoteID {
	return &GetCustomerCustomerIDQuoteQuoteID{Context: ctx, Handler: handler}
}

/* GetCustomerCustomerIDQuoteQuoteID swagger:route GET /customer/{customerId}/quote/{quoteId} getCustomerCustomerIdQuoteQuoteId

GetCustomerCustomerIDQuoteQuoteID get customer customer ID quote quote ID API

*/
type GetCustomerCustomerIDQuoteQuoteID struct {
	Context *middleware.Context
	Handler GetCustomerCustomerIDQuoteQuoteIDHandler
}

func (o *GetCustomerCustomerIDQuoteQuoteID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCustomerCustomerIDQuoteQuoteIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCustomerCustomerIDQuoteQuoteIDOKBody get customer customer ID quote quote ID o k body
//
// swagger:model GetCustomerCustomerIDQuoteQuoteIDOKBody
type GetCustomerCustomerIDQuoteQuoteIDOKBody struct {

	// created
	Created int64 `json:"created,omitempty"`

	// description
	Description string `json:"description"`

	// expires
	Expires int64 `json:"expires,omitempty"`

	// number
	Number string `json:"number"`

	// request
	Request string `json:"request,omitempty"`

	// service
	Service *GetCustomerCustomerIDQuoteQuoteIDOKBodyService `json:"service,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tradesperson
	Tradesperson *models.Tradesperson `json:"tradesperson,omitempty"`
}

// Validate validates this get customer customer ID quote quote ID o k body
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTradesperson(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) validateTradesperson(formats strfmt.Registry) error {
	if swag.IsZero(o.Tradesperson) { // not required
		return nil
	}

	if o.Tradesperson != nil {
		if err := o.Tradesperson.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "tradesperson")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "tradesperson")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer customer ID quote quote ID o k body based on the context it is used
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTradesperson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) contextValidateTradesperson(ctx context.Context, formats strfmt.Registry) error {

	if o.Tradesperson != nil {
		if err := o.Tradesperson.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "tradesperson")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "tradesperson")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerCustomerIDQuoteQuoteIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCustomerCustomerIDQuoteQuoteIDOKBodyService get customer customer ID quote quote ID o k body service
//
// swagger:model GetCustomerCustomerIDQuoteQuoteIDOKBodyService
type GetCustomerCustomerIDQuoteQuoteIDOKBodyService struct {

	// description
	Description string `json:"description,omitempty"`

	// products
	Products []*models.Product `json:"products"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this get customer customer ID quote quote ID o k body service
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBodyService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerCustomerIDQuoteQuoteIDOKBodyService) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	for i := 0; i < len(o.Products); i++ {
		if swag.IsZero(o.Products[i]) { // not required
			continue
		}

		if o.Products[i] != nil {
			if err := o.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service" + "." + "products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer customer ID quote quote ID o k body service based on the context it is used
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBodyService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerCustomerIDQuoteQuoteIDOKBodyService) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Products); i++ {

		if o.Products[i] != nil {
			if err := o.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service" + "." + "products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerCustomerIdQuoteQuoteIdOK" + "." + "service" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBodyService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerCustomerIDQuoteQuoteIDOKBodyService) UnmarshalBinary(b []byte) error {
	var res GetCustomerCustomerIDQuoteQuoteIDOKBodyService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
