// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTradespersonTradespersonIDTimeSlotsHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID time slots handler
type GetTradespersonTradespersonIDTimeSlotsHandlerFunc func(GetTradespersonTradespersonIDTimeSlotsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDTimeSlotsHandlerFunc) Handle(params GetTradespersonTradespersonIDTimeSlotsParams) middleware.Responder {
	return fn(params)
}

// GetTradespersonTradespersonIDTimeSlotsHandler interface for that can handle valid get tradesperson tradesperson ID time slots params
type GetTradespersonTradespersonIDTimeSlotsHandler interface {
	Handle(GetTradespersonTradespersonIDTimeSlotsParams) middleware.Responder
}

// NewGetTradespersonTradespersonIDTimeSlots creates a new http.Handler for the get tradesperson tradesperson ID time slots operation
func NewGetTradespersonTradespersonIDTimeSlots(ctx *middleware.Context, handler GetTradespersonTradespersonIDTimeSlotsHandler) *GetTradespersonTradespersonIDTimeSlots {
	return &GetTradespersonTradespersonIDTimeSlots{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDTimeSlots swagger:route GET /tradesperson/{tradespersonId}/time-slots getTradespersonTradespersonIdTimeSlots

GetTradespersonTradespersonIDTimeSlots get tradesperson tradesperson ID time slots API

*/
type GetTradespersonTradespersonIDTimeSlots struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDTimeSlotsHandler
}

func (o *GetTradespersonTradespersonIDTimeSlots) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDTimeSlotsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDTimeSlotsOKBodyItems0 get tradesperson tradesperson ID time slots o k body items0
//
// swagger:model GetTradespersonTradespersonIDTimeSlotsOKBodyItems0
type GetTradespersonTradespersonIDTimeSlotsOKBodyItems0 struct {

	// interval
	Interval string `json:"interval,omitempty"`

	// subscription
	Subscription bool `json:"subscription,omitempty"`

	// time slots
	TimeSlots []*GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0 `json:"timeSlots"`
}

// Validate validates this get tradesperson tradesperson ID time slots o k body items0
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0) validateTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.TimeSlots) { // not required
		return nil
	}

	for i := 0; i < len(o.TimeSlots); i++ {
		if swag.IsZero(o.TimeSlots[i]) { // not required
			continue
		}

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID time slots o k body items0 based on the context it is used
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0) contextValidateTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TimeSlots); i++ {

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDTimeSlotsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0 get tradesperson tradesperson ID time slots o k body items0 time slots items0
//
// swagger:model GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0
type GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0 struct {

	// segment size
	SegmentSize string `json:"segmentSize,omitempty"`

	// start time
	// Format: date
	StartTime strfmt.Date `json:"startTime,omitempty"`

	// taken
	Taken bool `json:"taken,omitempty"`

	// taken by
	TakenBy string `json:"takenBy,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID time slots o k body items0 time slots items0
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get tradesperson tradesperson ID time slots o k body items0 time slots items0 based on context it is used
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDTimeSlotsOKBodyItems0TimeSlotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
