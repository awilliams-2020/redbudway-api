// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutTradespersonTradespersonIDGoogleTokenHandlerFunc turns a function with the right signature into a put tradesperson tradesperson ID google token handler
type PutTradespersonTradespersonIDGoogleTokenHandlerFunc func(PutTradespersonTradespersonIDGoogleTokenParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTradespersonTradespersonIDGoogleTokenHandlerFunc) Handle(params PutTradespersonTradespersonIDGoogleTokenParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutTradespersonTradespersonIDGoogleTokenHandler interface for that can handle valid put tradesperson tradesperson ID google token params
type PutTradespersonTradespersonIDGoogleTokenHandler interface {
	Handle(PutTradespersonTradespersonIDGoogleTokenParams, interface{}) middleware.Responder
}

// NewPutTradespersonTradespersonIDGoogleToken creates a new http.Handler for the put tradesperson tradesperson ID google token operation
func NewPutTradespersonTradespersonIDGoogleToken(ctx *middleware.Context, handler PutTradespersonTradespersonIDGoogleTokenHandler) *PutTradespersonTradespersonIDGoogleToken {
	return &PutTradespersonTradespersonIDGoogleToken{Context: ctx, Handler: handler}
}

/* PutTradespersonTradespersonIDGoogleToken swagger:route PUT /tradesperson/{tradespersonId}/google-token putTradespersonTradespersonIdGoogleToken

PutTradespersonTradespersonIDGoogleToken put tradesperson tradesperson ID google token API

*/
type PutTradespersonTradespersonIDGoogleToken struct {
	Context *middleware.Context
	Handler PutTradespersonTradespersonIDGoogleTokenHandler
}

func (o *PutTradespersonTradespersonIDGoogleToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTradespersonTradespersonIDGoogleTokenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutTradespersonTradespersonIDGoogleTokenBody put tradesperson tradesperson ID google token body
//
// swagger:model PutTradespersonTradespersonIDGoogleTokenBody
type PutTradespersonTradespersonIDGoogleTokenBody struct {

	// access token
	// Required: true
	AccessToken *string `json:"accessToken"`
}

// Validate validates this put tradesperson tradesperson ID google token body
func (o *PutTradespersonTradespersonIDGoogleTokenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTradespersonTradespersonIDGoogleTokenBody) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("google"+"."+"accessToken", "body", o.AccessToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put tradesperson tradesperson ID google token body based on context it is used
func (o *PutTradespersonTradespersonIDGoogleTokenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDGoogleTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDGoogleTokenBody) UnmarshalBinary(b []byte) error {
	var res PutTradespersonTradespersonIDGoogleTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTradespersonTradespersonIDGoogleTokenOKBody put tradesperson tradesperson ID google token o k body
//
// swagger:model PutTradespersonTradespersonIDGoogleTokenOKBody
type PutTradespersonTradespersonIDGoogleTokenOKBody struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// expires in
	ExpiresIn float64 `json:"expiresIn,omitempty"`

	// picture
	Picture string `json:"picture,omitempty"`
}

// Validate validates this put tradesperson tradesperson ID google token o k body
func (o *PutTradespersonTradespersonIDGoogleTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put tradesperson tradesperson ID google token o k body based on context it is used
func (o *PutTradespersonTradespersonIDGoogleTokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDGoogleTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTradespersonTradespersonIDGoogleTokenOKBody) UnmarshalBinary(b []byte) error {
	var res PutTradespersonTradespersonIDGoogleTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
