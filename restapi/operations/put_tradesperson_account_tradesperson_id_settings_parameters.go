// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPutTradespersonAccountTradespersonIDSettingsParams creates a new PutTradespersonAccountTradespersonIDSettingsParams object
//
// There are no default values defined in the spec.
func NewPutTradespersonAccountTradespersonIDSettingsParams() PutTradespersonAccountTradespersonIDSettingsParams {

	return PutTradespersonAccountTradespersonIDSettingsParams{}
}

// PutTradespersonAccountTradespersonIDSettingsParams contains all the bound params for the put tradesperson account tradesperson ID settings operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutTradespersonAccountTradespersonIDSettings
type PutTradespersonAccountTradespersonIDSettingsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Address *bool
	/*
	  In: query
	*/
	Email *bool
	/*
	  In: query
	*/
	Number *bool
	/*
	  Required: true
	  In: path
	*/
	TradespersonID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutTradespersonAccountTradespersonIDSettingsParams() beforehand.
func (o *PutTradespersonAccountTradespersonIDSettingsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAddress, qhkAddress, _ := qs.GetOK("address")
	if err := o.bindAddress(qAddress, qhkAddress, route.Formats); err != nil {
		res = append(res, err)
	}

	qEmail, qhkEmail, _ := qs.GetOK("email")
	if err := o.bindEmail(qEmail, qhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	qNumber, qhkNumber, _ := qs.GetOK("number")
	if err := o.bindNumber(qNumber, qhkNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	rTradespersonID, rhkTradespersonID, _ := route.Params.GetOK("tradespersonId")
	if err := o.bindTradespersonID(rTradespersonID, rhkTradespersonID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAddress binds and validates parameter Address from query.
func (o *PutTradespersonAccountTradespersonIDSettingsParams) bindAddress(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("address", "query", "bool", raw)
	}
	o.Address = &value

	return nil
}

// bindEmail binds and validates parameter Email from query.
func (o *PutTradespersonAccountTradespersonIDSettingsParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("email", "query", "bool", raw)
	}
	o.Email = &value

	return nil
}

// bindNumber binds and validates parameter Number from query.
func (o *PutTradespersonAccountTradespersonIDSettingsParams) bindNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("number", "query", "bool", raw)
	}
	o.Number = &value

	return nil
}

// bindTradespersonID binds and validates parameter TradespersonID from path.
func (o *PutTradespersonAccountTradespersonIDSettingsParams) bindTradespersonID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("tradespersonId", "path", "int64", raw)
	}
	o.TradespersonID = value

	return nil
}
