// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTradespersonTradespersonIDFixedPricesHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID fixed prices handler
type GetTradespersonTradespersonIDFixedPricesHandlerFunc func(GetTradespersonTradespersonIDFixedPricesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDFixedPricesHandlerFunc) Handle(params GetTradespersonTradespersonIDFixedPricesParams) middleware.Responder {
	return fn(params)
}

// GetTradespersonTradespersonIDFixedPricesHandler interface for that can handle valid get tradesperson tradesperson ID fixed prices params
type GetTradespersonTradespersonIDFixedPricesHandler interface {
	Handle(GetTradespersonTradespersonIDFixedPricesParams) middleware.Responder
}

// NewGetTradespersonTradespersonIDFixedPrices creates a new http.Handler for the get tradesperson tradesperson ID fixed prices operation
func NewGetTradespersonTradespersonIDFixedPrices(ctx *middleware.Context, handler GetTradespersonTradespersonIDFixedPricesHandler) *GetTradespersonTradespersonIDFixedPrices {
	return &GetTradespersonTradespersonIDFixedPrices{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDFixedPrices swagger:route GET /tradesperson/{tradespersonId}/fixed-prices getTradespersonTradespersonIdFixedPrices

GetTradespersonTradespersonIDFixedPrices get tradesperson tradesperson ID fixed prices API

*/
type GetTradespersonTradespersonIDFixedPrices struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDFixedPricesHandler
}

func (o *GetTradespersonTradespersonIDFixedPrices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDFixedPricesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDFixedPricesOKBodyItems0 get tradesperson tradesperson ID fixed prices o k body items0
//
// swagger:model GetTradespersonTradespersonIDFixedPricesOKBodyItems0
type GetTradespersonTradespersonIDFixedPricesOKBodyItems0 struct {

	// available time slots
	AvailableTimeSlots int64 `json:"availableTimeSlots,omitempty"`

	// images
	Images []string `json:"images"`

	// interval
	Interval string `json:"interval,omitempty"`

	// price
	Price string `json:"price,omitempty"`

	// price Id
	PriceID string `json:"priceId,omitempty"`

	// rating
	Rating int64 `json:"rating,omitempty"`

	// reviews
	Reviews int64 `json:"reviews,omitempty"`

	// subscription
	Subscription bool `json:"subscription,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID fixed prices o k body items0
func (o *GetTradespersonTradespersonIDFixedPricesOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get tradesperson tradesperson ID fixed prices o k body items0 based on context it is used
func (o *GetTradespersonTradespersonIDFixedPricesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDFixedPricesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDFixedPricesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDFixedPricesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
