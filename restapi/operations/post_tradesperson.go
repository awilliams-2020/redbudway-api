// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTradespersonHandlerFunc turns a function with the right signature into a post tradesperson handler
type PostTradespersonHandlerFunc func(PostTradespersonParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTradespersonHandlerFunc) Handle(params PostTradespersonParams) middleware.Responder {
	return fn(params)
}

// PostTradespersonHandler interface for that can handle valid post tradesperson params
type PostTradespersonHandler interface {
	Handle(PostTradespersonParams) middleware.Responder
}

// NewPostTradesperson creates a new http.Handler for the post tradesperson operation
func NewPostTradesperson(ctx *middleware.Context, handler PostTradespersonHandler) *PostTradesperson {
	return &PostTradesperson{Context: ctx, Handler: handler}
}

/* PostTradesperson swagger:route POST /tradesperson postTradesperson

PostTradesperson post tradesperson API

*/
type PostTradesperson struct {
	Context *middleware.Context
	Handler PostTradespersonHandler
}

func (o *PostTradesperson) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTradespersonParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTradespersonBody post tradesperson body
//
// swagger:model PostTradespersonBody
type PostTradespersonBody struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// password
	// Required: true
	// Format: password
	Password *strfmt.Password `json:"password"`

	// token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this post tradesperson body
func (o *PostTradespersonBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTradespersonBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("tradesperson"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.FormatOf("tradesperson"+"."+"password", "body", "password", o.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post tradesperson body based on context it is used
func (o *PostTradespersonBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTradespersonCreatedBody post tradesperson created body
//
// swagger:model PostTradespersonCreatedBody
type PostTradespersonCreatedBody struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// created
	Created bool `json:"created"`

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// tradesperson Id
	TradespersonID string `json:"tradespersonId,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this post tradesperson created body
func (o *PostTradespersonCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post tradesperson created body based on context it is used
func (o *PostTradespersonCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
