// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetTradespersonTradespersonIDFixedPriceReviewsOKCode is the HTTP code returned for type GetTradespersonTradespersonIDFixedPriceReviewsOK
const GetTradespersonTradespersonIDFixedPriceReviewsOKCode int = 200

/*GetTradespersonTradespersonIDFixedPriceReviewsOK Fixed-price reviews

swagger:response getTradespersonTradespersonIdFixedPriceReviewsOK
*/
type GetTradespersonTradespersonIDFixedPriceReviewsOK struct {

	/*
	  In: Body
	*/
	Payload []*GetTradespersonTradespersonIDFixedPriceReviewsOKBodyItems0 `json:"body,omitempty"`
}

// NewGetTradespersonTradespersonIDFixedPriceReviewsOK creates GetTradespersonTradespersonIDFixedPriceReviewsOK with default headers values
func NewGetTradespersonTradespersonIDFixedPriceReviewsOK() *GetTradespersonTradespersonIDFixedPriceReviewsOK {

	return &GetTradespersonTradespersonIDFixedPriceReviewsOK{}
}

// WithPayload adds the payload to the get tradesperson tradesperson Id fixed price reviews o k response
func (o *GetTradespersonTradespersonIDFixedPriceReviewsOK) WithPayload(payload []*GetTradespersonTradespersonIDFixedPriceReviewsOKBodyItems0) *GetTradespersonTradespersonIDFixedPriceReviewsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tradesperson tradesperson Id fixed price reviews o k response
func (o *GetTradespersonTradespersonIDFixedPriceReviewsOK) SetPayload(payload []*GetTradespersonTradespersonIDFixedPriceReviewsOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTradespersonTradespersonIDFixedPriceReviewsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*GetTradespersonTradespersonIDFixedPriceReviewsOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
