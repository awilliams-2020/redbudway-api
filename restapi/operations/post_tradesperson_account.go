// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTradespersonAccountHandlerFunc turns a function with the right signature into a post tradesperson account handler
type PostTradespersonAccountHandlerFunc func(PostTradespersonAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTradespersonAccountHandlerFunc) Handle(params PostTradespersonAccountParams) middleware.Responder {
	return fn(params)
}

// PostTradespersonAccountHandler interface for that can handle valid post tradesperson account params
type PostTradespersonAccountHandler interface {
	Handle(PostTradespersonAccountParams) middleware.Responder
}

// NewPostTradespersonAccount creates a new http.Handler for the post tradesperson account operation
func NewPostTradespersonAccount(ctx *middleware.Context, handler PostTradespersonAccountHandler) *PostTradespersonAccount {
	return &PostTradespersonAccount{Context: ctx, Handler: handler}
}

/* PostTradespersonAccount swagger:route POST /tradesperson/account postTradespersonAccount

PostTradespersonAccount post tradesperson account API

*/
type PostTradespersonAccount struct {
	Context *middleware.Context
	Handler PostTradespersonAccountHandler
}

func (o *PostTradespersonAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTradespersonAccountParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTradespersonAccountBody post tradesperson account body
//
// swagger:model PostTradespersonAccountBody
type PostTradespersonAccountBody struct {

	// address
	// Required: true
	Address *PostTradespersonAccountParamsBodyAddress `json:"address"`

	// email
	// Required: true
	Email *string `json:"email"`

	// name
	// Required: true
	Name *string `json:"name"`

	// number
	// Required: true
	Number *string `json:"number"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this post tradesperson account body
func (o *PostTradespersonAccountBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTradespersonAccountBody) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"address", "body", o.Address); err != nil {
		return err
	}

	if o.Address != nil {
		if err := o.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tradesperson" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tradesperson" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *PostTradespersonAccountBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonAccountBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonAccountBody) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"number", "body", o.Number); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonAccountBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post tradesperson account body based on the context it is used
func (o *PostTradespersonAccountBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTradespersonAccountBody) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.Address != nil {
		if err := o.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tradesperson" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tradesperson" + "." + "address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonAccountBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonAccountBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonAccountBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTradespersonAccountCreatedBody post tradesperson account created body
//
// swagger:model PostTradespersonAccountCreatedBody
type PostTradespersonAccountCreatedBody struct {

	// created
	Created bool `json:"created,omitempty"`
}

// Validate validates this post tradesperson account created body
func (o *PostTradespersonAccountCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post tradesperson account created body based on context it is used
func (o *PostTradespersonAccountCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonAccountCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonAccountCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonAccountCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTradespersonAccountParamsBodyAddress post tradesperson account params body address
//
// swagger:model PostTradespersonAccountParamsBodyAddress
type PostTradespersonAccountParamsBodyAddress struct {

	// address line
	AddressLine string `json:"addressLine,omitempty"`

	// city
	// Required: true
	City *string `json:"city"`

	// state
	// Required: true
	State *string `json:"state"`

	// zip code
	// Required: true
	ZipCode *string `json:"zipCode"`
}

// Validate validates this post tradesperson account params body address
func (o *PostTradespersonAccountParamsBodyAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZipCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTradespersonAccountParamsBodyAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"address"+"."+"city", "body", o.City); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonAccountParamsBodyAddress) validateState(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"address"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonAccountParamsBodyAddress) validateZipCode(formats strfmt.Registry) error {

	if err := validate.Required("tradesperson"+"."+"address"+"."+"zipCode", "body", o.ZipCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post tradesperson account params body address based on context it is used
func (o *PostTradespersonAccountParamsBodyAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonAccountParamsBodyAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonAccountParamsBodyAddress) UnmarshalBinary(b []byte) error {
	var res PostTradespersonAccountParamsBodyAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
