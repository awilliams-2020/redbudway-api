// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostAdminHandlerFunc turns a function with the right signature into a post admin handler
type PostAdminHandlerFunc func(PostAdminParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAdminHandlerFunc) Handle(params PostAdminParams) middleware.Responder {
	return fn(params)
}

// PostAdminHandler interface for that can handle valid post admin params
type PostAdminHandler interface {
	Handle(PostAdminParams) middleware.Responder
}

// NewPostAdmin creates a new http.Handler for the post admin operation
func NewPostAdmin(ctx *middleware.Context, handler PostAdminHandler) *PostAdmin {
	return &PostAdmin{Context: ctx, Handler: handler}
}

/* PostAdmin swagger:route POST /admin postAdmin

PostAdmin post admin API

*/
type PostAdmin struct {
	Context *middleware.Context
	Handler PostAdminHandler
}

func (o *PostAdmin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAdminParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAdminBody post admin body
//
// swagger:model PostAdminBody
type PostAdminBody struct {

	// master pass
	// Required: true
	// Format: password
	MasterPass *strfmt.Password `json:"masterPass"`

	// password
	// Required: true
	// Format: password
	Password *strfmt.Password `json:"password"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this post admin body
func (o *PostAdminBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMasterPass(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAdminBody) validateMasterPass(formats strfmt.Registry) error {

	if err := validate.Required("admin"+"."+"masterPass", "body", o.MasterPass); err != nil {
		return err
	}

	if err := validate.FormatOf("admin"+"."+"masterPass", "body", "password", o.MasterPass.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostAdminBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("admin"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.FormatOf("admin"+"."+"password", "body", "password", o.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostAdminBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("admin"+"."+"user", "body", o.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post admin body based on context it is used
func (o *PostAdminBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAdminBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAdminBody) UnmarshalBinary(b []byte) error {
	var res PostAdminBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAdminCreatedBody post admin created body
//
// swagger:model PostAdminCreatedBody
type PostAdminCreatedBody struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// admin Id
	AdminID string `json:"adminId,omitempty"`

	// created
	Created bool `json:"created"`

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`
}

// Validate validates this post admin created body
func (o *PostAdminCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post admin created body based on context it is used
func (o *PostAdminCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAdminCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAdminCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostAdminCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
