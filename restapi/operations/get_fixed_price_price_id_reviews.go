// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetFixedPricePriceIDReviewsHandlerFunc turns a function with the right signature into a get fixed price price ID reviews handler
type GetFixedPricePriceIDReviewsHandlerFunc func(GetFixedPricePriceIDReviewsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFixedPricePriceIDReviewsHandlerFunc) Handle(params GetFixedPricePriceIDReviewsParams) middleware.Responder {
	return fn(params)
}

// GetFixedPricePriceIDReviewsHandler interface for that can handle valid get fixed price price ID reviews params
type GetFixedPricePriceIDReviewsHandler interface {
	Handle(GetFixedPricePriceIDReviewsParams) middleware.Responder
}

// NewGetFixedPricePriceIDReviews creates a new http.Handler for the get fixed price price ID reviews operation
func NewGetFixedPricePriceIDReviews(ctx *middleware.Context, handler GetFixedPricePriceIDReviewsHandler) *GetFixedPricePriceIDReviews {
	return &GetFixedPricePriceIDReviews{Context: ctx, Handler: handler}
}

/* GetFixedPricePriceIDReviews swagger:route GET /fixed-price/{priceId}/reviews getFixedPricePriceIdReviews

GetFixedPricePriceIDReviews get fixed price price ID reviews API

*/
type GetFixedPricePriceIDReviews struct {
	Context *middleware.Context
	Handler GetFixedPricePriceIDReviewsHandler
}

func (o *GetFixedPricePriceIDReviews) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFixedPricePriceIDReviewsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFixedPricePriceIDReviewsOKBody get fixed price price ID reviews o k body
//
// swagger:model GetFixedPricePriceIDReviewsOKBody
type GetFixedPricePriceIDReviewsOKBody struct {

	// five stars
	FiveStars int64 `json:"fiveStars"`

	// four stars
	FourStars int64 `json:"fourStars"`

	// one stars
	OneStars int64 `json:"oneStars"`

	// reviews
	Reviews []*GetFixedPricePriceIDReviewsOKBodyReviewsItems0 `json:"reviews"`

	// three stars
	ThreeStars int64 `json:"threeStars"`

	// two stars
	TwoStars int64 `json:"twoStars"`
}

// Validate validates this get fixed price price ID reviews o k body
func (o *GetFixedPricePriceIDReviewsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReviews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFixedPricePriceIDReviewsOKBody) validateReviews(formats strfmt.Registry) error {
	if swag.IsZero(o.Reviews) { // not required
		return nil
	}

	for i := 0; i < len(o.Reviews); i++ {
		if swag.IsZero(o.Reviews[i]) { // not required
			continue
		}

		if o.Reviews[i] != nil {
			if err := o.Reviews[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFixedPricePriceIdReviewsOK" + "." + "reviews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getFixedPricePriceIdReviewsOK" + "." + "reviews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get fixed price price ID reviews o k body based on the context it is used
func (o *GetFixedPricePriceIDReviewsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReviews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFixedPricePriceIDReviewsOKBody) contextValidateReviews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reviews); i++ {

		if o.Reviews[i] != nil {
			if err := o.Reviews[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFixedPricePriceIdReviewsOK" + "." + "reviews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getFixedPricePriceIdReviewsOK" + "." + "reviews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFixedPricePriceIDReviewsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFixedPricePriceIDReviewsOKBody) UnmarshalBinary(b []byte) error {
	var res GetFixedPricePriceIDReviewsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFixedPricePriceIDReviewsOKBodyReviewsItems0 get fixed price price ID reviews o k body reviews items0
//
// swagger:model GetFixedPricePriceIDReviewsOKBodyReviewsItems0
type GetFixedPricePriceIDReviewsOKBodyReviewsItems0 struct {

	// customer
	Customer string `json:"customer,omitempty"`

	// date
	Date string `json:"date,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// rating
	Rating int64 `json:"rating,omitempty"`

	// resp date
	RespDate string `json:"respDate,omitempty"`

	// resp msg
	RespMsg string `json:"respMsg,omitempty"`

	// responded
	Responded bool `json:"responded"`

	// tradesperson
	Tradesperson string `json:"tradesperson,omitempty"`
}

// Validate validates this get fixed price price ID reviews o k body reviews items0
func (o *GetFixedPricePriceIDReviewsOKBodyReviewsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fixed price price ID reviews o k body reviews items0 based on context it is used
func (o *GetFixedPricePriceIDReviewsOKBodyReviewsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFixedPricePriceIDReviewsOKBodyReviewsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFixedPricePriceIDReviewsOKBodyReviewsItems0) UnmarshalBinary(b []byte) error {
	var res GetFixedPricePriceIDReviewsOKBodyReviewsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
