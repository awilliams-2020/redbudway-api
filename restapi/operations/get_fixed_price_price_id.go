// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// GetFixedPricePriceIDHandlerFunc turns a function with the right signature into a get fixed price price ID handler
type GetFixedPricePriceIDHandlerFunc func(GetFixedPricePriceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFixedPricePriceIDHandlerFunc) Handle(params GetFixedPricePriceIDParams) middleware.Responder {
	return fn(params)
}

// GetFixedPricePriceIDHandler interface for that can handle valid get fixed price price ID params
type GetFixedPricePriceIDHandler interface {
	Handle(GetFixedPricePriceIDParams) middleware.Responder
}

// NewGetFixedPricePriceID creates a new http.Handler for the get fixed price price ID operation
func NewGetFixedPricePriceID(ctx *middleware.Context, handler GetFixedPricePriceIDHandler) *GetFixedPricePriceID {
	return &GetFixedPricePriceID{Context: ctx, Handler: handler}
}

/* GetFixedPricePriceID swagger:route GET /fixed-price/{priceId} getFixedPricePriceId

GetFixedPricePriceID get fixed price price ID API

*/
type GetFixedPricePriceID struct {
	Context *middleware.Context
	Handler GetFixedPricePriceIDHandler
}

func (o *GetFixedPricePriceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFixedPricePriceIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFixedPricePriceIDOKBody get fixed price price ID o k body
//
// swagger:model GetFixedPricePriceIDOKBody
type GetFixedPricePriceIDOKBody struct {

	// business
	Business *GetFixedPricePriceIDOKBodyBusiness `json:"business,omitempty"`

	// service
	Service *models.ServiceDetails `json:"service,omitempty"`
}

// Validate validates this get fixed price price ID o k body
func (o *GetFixedPricePriceIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusiness(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFixedPricePriceIDOKBody) validateBusiness(formats strfmt.Registry) error {
	if swag.IsZero(o.Business) { // not required
		return nil
	}

	if o.Business != nil {
		if err := o.Business.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFixedPricePriceIdOK" + "." + "business")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFixedPricePriceIdOK" + "." + "business")
			}
			return err
		}
	}

	return nil
}

func (o *GetFixedPricePriceIDOKBody) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFixedPricePriceIdOK" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFixedPricePriceIdOK" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get fixed price price ID o k body based on the context it is used
func (o *GetFixedPricePriceIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBusiness(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFixedPricePriceIDOKBody) contextValidateBusiness(ctx context.Context, formats strfmt.Registry) error {

	if o.Business != nil {
		if err := o.Business.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFixedPricePriceIdOK" + "." + "business")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFixedPricePriceIdOK" + "." + "business")
			}
			return err
		}
	}

	return nil
}

func (o *GetFixedPricePriceIDOKBody) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if o.Service != nil {
		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFixedPricePriceIdOK" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFixedPricePriceIdOK" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFixedPricePriceIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFixedPricePriceIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetFixedPricePriceIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFixedPricePriceIDOKBodyBusiness get fixed price price ID o k body business
//
// swagger:model GetFixedPricePriceIDOKBodyBusiness
type GetFixedPricePriceIDOKBodyBusiness struct {

	// name
	Name string `json:"name,omitempty"`

	// tradesperson Id
	TradespersonID string `json:"tradespersonId,omitempty"`

	// vanity URL
	VanityURL string `json:"vanityURL"`
}

// Validate validates this get fixed price price ID o k body business
func (o *GetFixedPricePriceIDOKBodyBusiness) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get fixed price price ID o k body business based on context it is used
func (o *GetFixedPricePriceIDOKBodyBusiness) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFixedPricePriceIDOKBodyBusiness) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFixedPricePriceIDOKBodyBusiness) UnmarshalBinary(b []byte) error {
	var res GetFixedPricePriceIDOKBodyBusiness
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
