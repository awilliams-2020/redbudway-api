// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"redbudway-api/models"
)

// PostCustomerHandlerFunc turns a function with the right signature into a post customer handler
type PostCustomerHandlerFunc func(PostCustomerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCustomerHandlerFunc) Handle(params PostCustomerParams) middleware.Responder {
	return fn(params)
}

// PostCustomerHandler interface for that can handle valid post customer params
type PostCustomerHandler interface {
	Handle(PostCustomerParams) middleware.Responder
}

// NewPostCustomer creates a new http.Handler for the post customer operation
func NewPostCustomer(ctx *middleware.Context, handler PostCustomerHandler) *PostCustomer {
	return &PostCustomer{Context: ctx, Handler: handler}
}

/* PostCustomer swagger:route POST /customer postCustomer

PostCustomer post customer API

*/
type PostCustomer struct {
	Context *middleware.Context
	Handler PostCustomerHandler
}

func (o *PostCustomer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCustomerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCustomerBody post customer body
//
// swagger:model PostCustomerBody
type PostCustomerBody struct {

	// address
	// Required: true
	Address *models.Address `json:"address"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// name
	// Required: true
	Name *string `json:"name"`

	// number
	// Required: true
	Number *string `json:"number"`

	// password
	// Required: true
	// Format: password
	Password *strfmt.Password `json:"password"`
}

// Validate validates this post customer body
func (o *PostCustomerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerBody) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"address", "body", o.Address); err != nil {
		return err
	}

	if o.Address != nil {
		if err := o.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *PostCustomerBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("customer"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostCustomerBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostCustomerBody) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"number", "body", o.Number); err != nil {
		return err
	}

	return nil
}

func (o *PostCustomerBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("customer"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.FormatOf("customer"+"."+"password", "body", "password", o.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post customer body based on the context it is used
func (o *PostCustomerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerBody) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.Address != nil {
		if err := o.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer" + "." + "address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCustomerCreatedBody post customer created body
//
// swagger:model PostCustomerCreatedBody
type PostCustomerCreatedBody struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// created
	Created bool `json:"created"`

	// customer Id
	CustomerID string `json:"customerId,omitempty"`

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`
}

// Validate validates this post customer created body
func (o *PostCustomerCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post customer created body based on context it is used
func (o *PostCustomerCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
