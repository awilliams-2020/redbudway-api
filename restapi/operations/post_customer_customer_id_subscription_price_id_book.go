// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"redbudway-api/models"
)

// PostCustomerCustomerIDSubscriptionPriceIDBookHandlerFunc turns a function with the right signature into a post customer customer ID subscription price ID book handler
type PostCustomerCustomerIDSubscriptionPriceIDBookHandlerFunc func(PostCustomerCustomerIDSubscriptionPriceIDBookParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCustomerCustomerIDSubscriptionPriceIDBookHandlerFunc) Handle(params PostCustomerCustomerIDSubscriptionPriceIDBookParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCustomerCustomerIDSubscriptionPriceIDBookHandler interface for that can handle valid post customer customer ID subscription price ID book params
type PostCustomerCustomerIDSubscriptionPriceIDBookHandler interface {
	Handle(PostCustomerCustomerIDSubscriptionPriceIDBookParams, interface{}) middleware.Responder
}

// NewPostCustomerCustomerIDSubscriptionPriceIDBook creates a new http.Handler for the post customer customer ID subscription price ID book operation
func NewPostCustomerCustomerIDSubscriptionPriceIDBook(ctx *middleware.Context, handler PostCustomerCustomerIDSubscriptionPriceIDBookHandler) *PostCustomerCustomerIDSubscriptionPriceIDBook {
	return &PostCustomerCustomerIDSubscriptionPriceIDBook{Context: ctx, Handler: handler}
}

/* PostCustomerCustomerIDSubscriptionPriceIDBook swagger:route POST /customer/{customerId}/subscription/{priceId}/book postCustomerCustomerIdSubscriptionPriceIdBook

PostCustomerCustomerIDSubscriptionPriceIDBook post customer customer ID subscription price ID book API

*/
type PostCustomerCustomerIDSubscriptionPriceIDBook struct {
	Context *middleware.Context
	Handler PostCustomerCustomerIDSubscriptionPriceIDBookHandler
}

func (o *PostCustomerCustomerIDSubscriptionPriceIDBook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCustomerCustomerIDSubscriptionPriceIDBookParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCustomerCustomerIDSubscriptionPriceIDBookBody post customer customer ID subscription price ID book body
//
// swagger:model PostCustomerCustomerIDSubscriptionPriceIDBookBody
type PostCustomerCustomerIDSubscriptionPriceIDBookBody struct {

	// code
	Code string `json:"code,omitempty"`

	// form
	Form []models.FormFields `json:"form"`

	// time slots
	// Min Items: 1
	TimeSlots []*models.TimeSlot `json:"timeSlots"`

	// time zone
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this post customer customer ID subscription price ID book body
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateForm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) validateForm(formats strfmt.Registry) error {
	if swag.IsZero(o.Form) { // not required
		return nil
	}

	for i := 0; i < len(o.Form); i++ {

		if err := o.Form[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("booking" + "." + "form" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("booking" + "." + "form" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) validateTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.TimeSlots) { // not required
		return nil
	}

	iTimeSlotsSize := int64(len(o.TimeSlots))

	if err := validate.MinItems("booking"+"."+"timeSlots", "body", iTimeSlotsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(o.TimeSlots); i++ {
		if swag.IsZero(o.TimeSlots[i]) { // not required
			continue
		}

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post customer customer ID subscription price ID book body based on the context it is used
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateForm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) contextValidateForm(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Form); i++ {

		if err := o.Form[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("booking" + "." + "form" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("booking" + "." + "form" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) contextValidateTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TimeSlots); i++ {

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerCustomerIDSubscriptionPriceIDBookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody post customer customer ID subscription price ID book created body
//
// swagger:model PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody
type PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody struct {

	// booked
	Booked bool `json:"booked"`
}

// Validate validates this post customer customer ID subscription price ID book created body
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post customer customer ID subscription price ID book created body based on context it is used
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerCustomerIDSubscriptionPriceIDBookCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
