// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostTradespersonTradespersonIDBillingManualInvoiceOKCode is the HTTP code returned for type PostTradespersonTradespersonIDBillingManualInvoiceOK
const PostTradespersonTradespersonIDBillingManualInvoiceOKCode int = 200

/*PostTradespersonTradespersonIDBillingManualInvoiceOK If manual invoice refunded

swagger:response postTradespersonTradespersonIdBillingManualInvoiceOK
*/
type PostTradespersonTradespersonIDBillingManualInvoiceOK struct {

	/*
	  In: Body
	*/
	Payload *PostTradespersonTradespersonIDBillingManualInvoiceOKBody `json:"body,omitempty"`
}

// NewPostTradespersonTradespersonIDBillingManualInvoiceOK creates PostTradespersonTradespersonIDBillingManualInvoiceOK with default headers values
func NewPostTradespersonTradespersonIDBillingManualInvoiceOK() *PostTradespersonTradespersonIDBillingManualInvoiceOK {

	return &PostTradespersonTradespersonIDBillingManualInvoiceOK{}
}

// WithPayload adds the payload to the post tradesperson tradesperson Id billing manual invoice o k response
func (o *PostTradespersonTradespersonIDBillingManualInvoiceOK) WithPayload(payload *PostTradespersonTradespersonIDBillingManualInvoiceOKBody) *PostTradespersonTradespersonIDBillingManualInvoiceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post tradesperson tradesperson Id billing manual invoice o k response
func (o *PostTradespersonTradespersonIDBillingManualInvoiceOK) SetPayload(payload *PostTradespersonTradespersonIDBillingManualInvoiceOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTradespersonTradespersonIDBillingManualInvoiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
