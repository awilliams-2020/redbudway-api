// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTradespersonTradespersonIDEmailHandlerFunc turns a function with the right signature into a post tradesperson tradesperson ID email handler
type PostTradespersonTradespersonIDEmailHandlerFunc func(PostTradespersonTradespersonIDEmailParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTradespersonTradespersonIDEmailHandlerFunc) Handle(params PostTradespersonTradespersonIDEmailParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostTradespersonTradespersonIDEmailHandler interface for that can handle valid post tradesperson tradesperson ID email params
type PostTradespersonTradespersonIDEmailHandler interface {
	Handle(PostTradespersonTradespersonIDEmailParams, interface{}) middleware.Responder
}

// NewPostTradespersonTradespersonIDEmail creates a new http.Handler for the post tradesperson tradesperson ID email operation
func NewPostTradespersonTradespersonIDEmail(ctx *middleware.Context, handler PostTradespersonTradespersonIDEmailHandler) *PostTradespersonTradespersonIDEmail {
	return &PostTradespersonTradespersonIDEmail{Context: ctx, Handler: handler}
}

/* PostTradespersonTradespersonIDEmail swagger:route POST /tradesperson/{tradespersonId}/email postTradespersonTradespersonIdEmail

PostTradespersonTradespersonIDEmail post tradesperson tradesperson ID email API

*/
type PostTradespersonTradespersonIDEmail struct {
	Context *middleware.Context
	Handler PostTradespersonTradespersonIDEmailHandler
}

func (o *PostTradespersonTradespersonIDEmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTradespersonTradespersonIDEmailParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTradespersonTradespersonIDEmailBody post tradesperson tradesperson ID email body
//
// swagger:model PostTradespersonTradespersonIDEmailBody
type PostTradespersonTradespersonIDEmailBody struct {

	// customer Id
	// Required: true
	CustomerID *string `json:"customerId"`

	// images
	Images []string `json:"images"`

	// message
	// Required: true
	Message *string `json:"message"`

	// price Id
	PriceID string `json:"priceId,omitempty"`

	// quote Id
	QuoteID string `json:"quoteId,omitempty"`
}

// Validate validates this post tradesperson tradesperson ID email body
func (o *PostTradespersonTradespersonIDEmailBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTradespersonTradespersonIDEmailBody) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("email"+"."+"customerId", "body", o.CustomerID); err != nil {
		return err
	}

	return nil
}

func (o *PostTradespersonTradespersonIDEmailBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("email"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post tradesperson tradesperson ID email body based on context it is used
func (o *PostTradespersonTradespersonIDEmailBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDEmailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDEmailBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonTradespersonIDEmailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTradespersonTradespersonIDEmailOKBody post tradesperson tradesperson ID email o k body
//
// swagger:model PostTradespersonTradespersonIDEmailOKBody
type PostTradespersonTradespersonIDEmailOKBody struct {

	// sent
	Sent bool `json:"sent"`
}

// Validate validates this post tradesperson tradesperson ID email o k body
func (o *PostTradespersonTradespersonIDEmailOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post tradesperson tradesperson ID email o k body based on context it is used
func (o *PostTradespersonTradespersonIDEmailOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDEmailOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTradespersonTradespersonIDEmailOKBody) UnmarshalBinary(b []byte) error {
	var res PostTradespersonTradespersonIDEmailOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
