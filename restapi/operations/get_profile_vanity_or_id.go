// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProfileVanityOrIDHandlerFunc turns a function with the right signature into a get profile vanity or ID handler
type GetProfileVanityOrIDHandlerFunc func(GetProfileVanityOrIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProfileVanityOrIDHandlerFunc) Handle(params GetProfileVanityOrIDParams) middleware.Responder {
	return fn(params)
}

// GetProfileVanityOrIDHandler interface for that can handle valid get profile vanity or ID params
type GetProfileVanityOrIDHandler interface {
	Handle(GetProfileVanityOrIDParams) middleware.Responder
}

// NewGetProfileVanityOrID creates a new http.Handler for the get profile vanity or ID operation
func NewGetProfileVanityOrID(ctx *middleware.Context, handler GetProfileVanityOrIDHandler) *GetProfileVanityOrID {
	return &GetProfileVanityOrID{Context: ctx, Handler: handler}
}

/* GetProfileVanityOrID swagger:route GET /profile/{vanityOrId} getProfileVanityOrId

GetProfileVanityOrID get profile vanity or ID API

*/
type GetProfileVanityOrID struct {
	Context *middleware.Context
	Handler GetProfileVanityOrIDHandler
}

func (o *GetProfileVanityOrID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetProfileVanityOrIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
