// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID billing quote quote ID invoice invoice ID handler
type GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandlerFunc func(GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandlerFunc) Handle(params GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler interface for that can handle valid get tradesperson tradesperson ID billing quote quote ID invoice invoice ID params
type GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler interface {
	Handle(GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDParams, interface{}) middleware.Responder
}

// NewGetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID creates a new http.Handler for the get tradesperson tradesperson ID billing quote quote ID invoice invoice ID operation
func NewGetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID(ctx *middleware.Context, handler GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler) *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID {
	return &GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID swagger:route GET /tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId} getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceId

GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID get tradesperson tradesperson ID billing quote quote ID invoice invoice ID API

*/
type GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler
}

func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody get tradesperson tradesperson ID billing quote quote ID invoice invoice ID o k body
//
// swagger:model GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody
type GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody struct {

	// created
	Created int64 `json:"created,omitempty"`

	// customer
	Customer *models.Customer `json:"customer,omitempty"`

	// description
	Description string `json:"description"`

	// number
	Number string `json:"number,omitempty"`

	// pdf
	Pdf string `json:"pdf,omitempty"`

	// products
	Products []*models.Product `json:"products"`

	// refunded
	Refunded int64 `json:"refunded,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID billing quote quote ID invoice invoice ID o k body
func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	for i := 0; i < len(o.Products); i++ {
		if swag.IsZero(o.Products[i]) { // not required
			continue
		}

		if o.Products[i] != nil {
			if err := o.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID billing quote quote ID invoice invoice ID o k body based on the context it is used
func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {
		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Products); i++ {

		if o.Products[i] != nil {
			if err := o.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdBillingQuoteQuoteIdInvoiceInvoiceIdOK" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
