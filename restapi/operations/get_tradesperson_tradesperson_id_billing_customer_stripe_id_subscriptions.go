// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID billing customer stripe ID subscriptions handler
type GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandlerFunc func(GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandlerFunc) Handle(params GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler interface for that can handle valid get tradesperson tradesperson ID billing customer stripe ID subscriptions params
type GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler interface {
	Handle(GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsParams, interface{}) middleware.Responder
}

// NewGetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions creates a new http.Handler for the get tradesperson tradesperson ID billing customer stripe ID subscriptions operation
func NewGetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions(ctx *middleware.Context, handler GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler) *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions {
	return &GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions swagger:route GET /tradesperson/{tradespersonId}/billing/customer/{stripeId}/subscriptions getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptions

GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions get tradesperson tradesperson ID billing customer stripe ID subscriptions API

*/
type GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body
//
// swagger:model GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody
type GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody struct {

	// address
	Address *models.Address `json:"address,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// subscriptions
	Subscriptions []*GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0 `json:"subscriptions"`
}

// Validate validates this get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.Address) { // not required
		return nil
	}

	if o.Address != nil {
		if err := o.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) validateSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(o.Subscriptions); i++ {
		if swag.IsZero(o.Subscriptions[i]) { // not required
			continue
		}

		if o.Subscriptions[i] != nil {
			if err := o.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body based on the context it is used
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.Address != nil {
		if err := o.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) contextValidateSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Subscriptions); i++ {

		if o.Subscriptions[i] != nil {
			if err := o.Subscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdBillingCustomerStripeIdSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0 get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body subscriptions items0
//
// swagger:model GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0
type GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// details
	Details []*GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0 `json:"details"`

	// interval
	Interval string `json:"interval,omitempty"`

	// time zone
	TimeZone string `json:"timeZone,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body subscriptions items0
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body subscriptions items0 based on the context it is used
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0 get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body subscriptions items0 details items0
//
// swagger:model GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0
type GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0 struct {

	// invoice Id
	InvoiceID string `json:"invoiceId,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// subscription Id
	SubscriptionID string `json:"subscriptionId,omitempty"`

	// time slots
	TimeSlots []*models.TimeSlot `json:"timeSlots"`
}

// Validate validates this get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body subscriptions items0 details items0
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0) validateTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.TimeSlots) { // not required
		return nil
	}

	for i := 0; i < len(o.TimeSlots); i++ {
		if swag.IsZero(o.TimeSlots[i]) { // not required
			continue
		}

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID billing customer stripe ID subscriptions o k body subscriptions items0 details items0 based on the context it is used
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0) contextValidateTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TimeSlots); i++ {

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsOKBodySubscriptionsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
