// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOKCode is the HTTP code returned for type PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK
const PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOKCode int = 200

/*PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK If quote was revised

swagger:response postTradespersonTradespersonIdBillingQuoteQuoteIdReviseOK
*/
type PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK struct {

	/*
	  In: Body
	*/
	Payload *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOKBody `json:"body,omitempty"`
}

// NewPostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK creates PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK with default headers values
func NewPostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK() *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK {

	return &PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK{}
}

// WithPayload adds the payload to the post tradesperson tradesperson Id billing quote quote Id revise o k response
func (o *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK) WithPayload(payload *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOKBody) *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post tradesperson tradesperson Id billing quote quote Id revise o k response
func (o *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK) SetPayload(payload *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
