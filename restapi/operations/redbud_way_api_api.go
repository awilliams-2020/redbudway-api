// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRedbudWayAPIAPI creates a new RedbudWayAPI instance
func NewRedbudWayAPIAPI(spec *loads.Document) *RedbudWayAPIAPI {
	return &RedbudWayAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		DeleteCustomerCustomerIDHandler: DeleteCustomerCustomerIDHandlerFunc(func(params DeleteCustomerCustomerIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteCustomerCustomerID has not yet been implemented")
		}),
		DeleteTradespersonTradespersonIDHandler: DeleteTradespersonTradespersonIDHandlerFunc(func(params DeleteTradespersonTradespersonIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonTradespersonID has not yet been implemented")
		}),
		DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler: DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandlerFunc(func(params DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonTradespersonIDBillingInvoiceInvoiceID has not yet been implemented")
		}),
		DeleteTradespersonTradespersonIDCouponCouponIDHandler: DeleteTradespersonTradespersonIDCouponCouponIDHandlerFunc(func(params DeleteTradespersonTradespersonIDCouponCouponIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonTradespersonIDCouponCouponID has not yet been implemented")
		}),
		DeleteTradespersonTradespersonIDGoogleTokenHandler: DeleteTradespersonTradespersonIDGoogleTokenHandlerFunc(func(params DeleteTradespersonTradespersonIDGoogleTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonTradespersonIDGoogleToken has not yet been implemented")
		}),
		DeleteTradespersonTradespersonIDPromoPromoIDHandler: DeleteTradespersonTradespersonIDPromoPromoIDHandlerFunc(func(params DeleteTradespersonTradespersonIDPromoPromoIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonTradespersonIDPromoPromoID has not yet been implemented")
		}),
		GetAddressHandler: GetAddressHandlerFunc(func(params GetAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAddress has not yet been implemented")
		}),
		GetAdminAdminIDAccessTokenHandler: GetAdminAdminIDAccessTokenHandlerFunc(func(params GetAdminAdminIDAccessTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetAdminAdminIDAccessToken has not yet been implemented")
		}),
		GetAdminAdminIDTradespeopleHandler: GetAdminAdminIDTradespeopleHandlerFunc(func(params GetAdminAdminIDTradespeopleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetAdminAdminIDTradespeople has not yet been implemented")
		}),
		GetCustomerCustomerIDAccessTokenHandler: GetCustomerCustomerIDAccessTokenHandlerFunc(func(params GetCustomerCustomerIDAccessTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDAccessToken has not yet been implemented")
		}),
		GetCustomerCustomerIDBillingLinkHandler: GetCustomerCustomerIDBillingLinkHandlerFunc(func(params GetCustomerCustomerIDBillingLinkParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDBillingLink has not yet been implemented")
		}),
		GetCustomerCustomerIDBookingsHandler: GetCustomerCustomerIDBookingsHandlerFunc(func(params GetCustomerCustomerIDBookingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDBookings has not yet been implemented")
		}),
		GetCustomerCustomerIDFixedPricePriceIDReviewHandler: GetCustomerCustomerIDFixedPricePriceIDReviewHandlerFunc(func(params GetCustomerCustomerIDFixedPricePriceIDReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDFixedPricePriceIDReview has not yet been implemented")
		}),
		GetCustomerCustomerIDPaymentDefaultHandler: GetCustomerCustomerIDPaymentDefaultHandlerFunc(func(params GetCustomerCustomerIDPaymentDefaultParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDPaymentDefault has not yet been implemented")
		}),
		GetCustomerCustomerIDPromoHandler: GetCustomerCustomerIDPromoHandlerFunc(func(params GetCustomerCustomerIDPromoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDPromo has not yet been implemented")
		}),
		GetCustomerCustomerIDQuoteQuoteIDHandler: GetCustomerCustomerIDQuoteQuoteIDHandlerFunc(func(params GetCustomerCustomerIDQuoteQuoteIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDQuoteQuoteID has not yet been implemented")
		}),
		GetCustomerCustomerIDQuoteQuoteIDReviewHandler: GetCustomerCustomerIDQuoteQuoteIDReviewHandlerFunc(func(params GetCustomerCustomerIDQuoteQuoteIDReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDQuoteQuoteIDReview has not yet been implemented")
		}),
		GetCustomerCustomerIDQuotesHandler: GetCustomerCustomerIDQuotesHandlerFunc(func(params GetCustomerCustomerIDQuotesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDQuotes has not yet been implemented")
		}),
		GetCustomerCustomerIDReverifyHandler: GetCustomerCustomerIDReverifyHandlerFunc(func(params GetCustomerCustomerIDReverifyParams) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDReverify has not yet been implemented")
		}),
		GetCustomerCustomerIDSubscriptionPriceIDReviewHandler: GetCustomerCustomerIDSubscriptionPriceIDReviewHandlerFunc(func(params GetCustomerCustomerIDSubscriptionPriceIDReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDSubscriptionPriceIDReview has not yet been implemented")
		}),
		GetCustomerCustomerIDVerifyHandler: GetCustomerCustomerIDVerifyHandlerFunc(func(params GetCustomerCustomerIDVerifyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetCustomerCustomerIDVerify has not yet been implemented")
		}),
		GetFixedPricePagesHandler: GetFixedPricePagesHandlerFunc(func(params GetFixedPricePagesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetFixedPricePages has not yet been implemented")
		}),
		GetFixedPricePriceIDHandler: GetFixedPricePriceIDHandlerFunc(func(params GetFixedPricePriceIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetFixedPricePriceID has not yet been implemented")
		}),
		GetFixedPricePriceIDReviewsHandler: GetFixedPricePriceIDReviewsHandlerFunc(func(params GetFixedPricePriceIDReviewsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetFixedPricePriceIDReviews has not yet been implemented")
		}),
		GetFixedPricesHandler: GetFixedPricesHandlerFunc(func(params GetFixedPricesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetFixedPrices has not yet been implemented")
		}),
		GetForgotPasswordHandler: GetForgotPasswordHandlerFunc(func(params GetForgotPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation GetForgotPassword has not yet been implemented")
		}),
		GetLocationHandler: GetLocationHandlerFunc(func(params GetLocationParams) middleware.Responder {
			return middleware.NotImplemented("operation GetLocation has not yet been implemented")
		}),
		GetProfileVanityOrIDHandler: GetProfileVanityOrIDHandlerFunc(func(params GetProfileVanityOrIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetProfileVanityOrID has not yet been implemented")
		}),
		GetProfileVanityOrIDFixedPricesHandler: GetProfileVanityOrIDFixedPricesHandlerFunc(func(params GetProfileVanityOrIDFixedPricesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetProfileVanityOrIDFixedPrices has not yet been implemented")
		}),
		GetProfileVanityOrIDQuotesHandler: GetProfileVanityOrIDQuotesHandlerFunc(func(params GetProfileVanityOrIDQuotesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetProfileVanityOrIDQuotes has not yet been implemented")
		}),
		GetQuotePagesHandler: GetQuotePagesHandlerFunc(func(params GetQuotePagesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetQuotePages has not yet been implemented")
		}),
		GetQuoteQuoteIDHandler: GetQuoteQuoteIDHandlerFunc(func(params GetQuoteQuoteIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetQuoteQuoteID has not yet been implemented")
		}),
		GetQuoteQuoteIDReviewsHandler: GetQuoteQuoteIDReviewsHandlerFunc(func(params GetQuoteQuoteIDReviewsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetQuoteQuoteIDReviews has not yet been implemented")
		}),
		GetQuotesHandler: GetQuotesHandlerFunc(func(params GetQuotesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetQuotes has not yet been implemented")
		}),
		GetTradespersonTradespersonIDHandler: GetTradespersonTradespersonIDHandlerFunc(func(params GetTradespersonTradespersonIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDAccessTokenHandler: GetTradespersonTradespersonIDAccessTokenHandlerFunc(func(params GetTradespersonTradespersonIDAccessTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDAccessToken has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler: GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandlerFunc(func(params GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler: GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandlerFunc(func(params GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingCustomersHandler: GetTradespersonTradespersonIDBillingCustomersHandlerFunc(func(params GetTradespersonTradespersonIDBillingCustomersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingCustomers has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler: GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandlerFunc(func(params GetTradespersonTradespersonIDBillingInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingInvoiceInvoiceID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingInvoicePagesHandler: GetTradespersonTradespersonIDBillingInvoicePagesHandlerFunc(func(params GetTradespersonTradespersonIDBillingInvoicePagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingInvoicePages has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingInvoicesHandler: GetTradespersonTradespersonIDBillingInvoicesHandlerFunc(func(params GetTradespersonTradespersonIDBillingInvoicesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingInvoices has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler: GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandlerFunc(func(params GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingManualInvoiceInvoiceID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingManualInvoicePagesHandler: GetTradespersonTradespersonIDBillingManualInvoicePagesHandlerFunc(func(params GetTradespersonTradespersonIDBillingManualInvoicePagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingManualInvoicePages has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingManualInvoicesHandler: GetTradespersonTradespersonIDBillingManualInvoicesHandlerFunc(func(params GetTradespersonTradespersonIDBillingManualInvoicesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingManualInvoices has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingQuotePagesHandler: GetTradespersonTradespersonIDBillingQuotePagesHandlerFunc(func(params GetTradespersonTradespersonIDBillingQuotePagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingQuotePages has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler: GetTradespersonTradespersonIDBillingQuoteQuoteIDHandlerFunc(func(params GetTradespersonTradespersonIDBillingQuoteQuoteIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingQuoteQuoteID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler: GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandlerFunc(func(params GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler: GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandlerFunc(func(params GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingQuoteQuoteIDPdf has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingQuotesHandler: GetTradespersonTradespersonIDBillingQuotesHandlerFunc(func(params GetTradespersonTradespersonIDBillingQuotesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingQuotes has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingSubscriptionPagesHandler: GetTradespersonTradespersonIDBillingSubscriptionPagesHandlerFunc(func(params GetTradespersonTradespersonIDBillingSubscriptionPagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingSubscriptionPages has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingSubscriptionsHandler: GetTradespersonTradespersonIDBillingSubscriptionsHandlerFunc(func(params GetTradespersonTradespersonIDBillingSubscriptionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingSubscriptions has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBrandingHandler: GetTradespersonTradespersonIDBrandingHandlerFunc(func(params GetTradespersonTradespersonIDBrandingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBranding has not yet been implemented")
		}),
		GetTradespersonTradespersonIDCouponCouponIDHandler: GetTradespersonTradespersonIDCouponCouponIDHandlerFunc(func(params GetTradespersonTradespersonIDCouponCouponIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDCouponCouponID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDDiscountsHandler: GetTradespersonTradespersonIDDiscountsHandlerFunc(func(params GetTradespersonTradespersonIDDiscountsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDDiscounts has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPricePagesHandler: GetTradespersonTradespersonIDFixedPricePagesHandlerFunc(func(params GetTradespersonTradespersonIDFixedPricePagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPricePages has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPricePriceIDHandler: GetTradespersonTradespersonIDFixedPricePriceIDHandlerFunc(func(params GetTradespersonTradespersonIDFixedPricePriceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPricePriceID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPriceReviewsHandler: GetTradespersonTradespersonIDFixedPriceReviewsHandlerFunc(func(params GetTradespersonTradespersonIDFixedPriceReviewsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPriceReviews has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPricesHandler: GetTradespersonTradespersonIDFixedPricesHandlerFunc(func(params GetTradespersonTradespersonIDFixedPricesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPrices has not yet been implemented")
		}),
		GetTradespersonTradespersonIDLoginLinkHandler: GetTradespersonTradespersonIDLoginLinkHandlerFunc(func(params GetTradespersonTradespersonIDLoginLinkParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDLoginLink has not yet been implemented")
		}),
		GetTradespersonTradespersonIDOnboardHandler: GetTradespersonTradespersonIDOnboardHandlerFunc(func(params GetTradespersonTradespersonIDOnboardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDOnboard has not yet been implemented")
		}),
		GetTradespersonTradespersonIDProfileHandler: GetTradespersonTradespersonIDProfileHandlerFunc(func(params GetTradespersonTradespersonIDProfileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDProfile has not yet been implemented")
		}),
		GetTradespersonTradespersonIDPromoPromoIDHandler: GetTradespersonTradespersonIDPromoPromoIDHandlerFunc(func(params GetTradespersonTradespersonIDPromoPromoIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDPromoPromoID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuotePagesHandler: GetTradespersonTradespersonIDQuotePagesHandlerFunc(func(params GetTradespersonTradespersonIDQuotePagesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuotePages has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuoteQuoteIDHandler: GetTradespersonTradespersonIDQuoteQuoteIDHandlerFunc(func(params GetTradespersonTradespersonIDQuoteQuoteIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuoteQuoteID has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuoteReviewsHandler: GetTradespersonTradespersonIDQuoteReviewsHandlerFunc(func(params GetTradespersonTradespersonIDQuoteReviewsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuoteReviews has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuotesHandler: GetTradespersonTradespersonIDQuotesHandlerFunc(func(params GetTradespersonTradespersonIDQuotesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuotes has not yet been implemented")
		}),
		GetTradespersonTradespersonIDScheduleHandler: GetTradespersonTradespersonIDScheduleHandlerFunc(func(params GetTradespersonTradespersonIDScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDSchedule has not yet been implemented")
		}),
		GetTradespersonTradespersonIDServicesHandler: GetTradespersonTradespersonIDServicesHandlerFunc(func(params GetTradespersonTradespersonIDServicesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDServices has not yet been implemented")
		}),
		GetTradespersonTradespersonIDSettingsHandler: GetTradespersonTradespersonIDSettingsHandlerFunc(func(params GetTradespersonTradespersonIDSettingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDSettings has not yet been implemented")
		}),
		GetTradespersonTradespersonIDSyncHandler: GetTradespersonTradespersonIDSyncHandlerFunc(func(params GetTradespersonTradespersonIDSyncParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDSync has not yet been implemented")
		}),
		GetTradespersonTradespersonIDTimeSlotsHandler: GetTradespersonTradespersonIDTimeSlotsHandlerFunc(func(params GetTradespersonTradespersonIDTimeSlotsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDTimeSlots has not yet been implemented")
		}),
		PostCustomerHandler: PostCustomerHandlerFunc(func(params PostCustomerParams) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomer has not yet been implemented")
		}),
		PostCustomerCustomerIDAccessTokenHandler: PostCustomerCustomerIDAccessTokenHandlerFunc(func(params PostCustomerCustomerIDAccessTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDAccessToken has not yet been implemented")
		}),
		PostCustomerCustomerIDFixedPricePriceIDBookHandler: PostCustomerCustomerIDFixedPricePriceIDBookHandlerFunc(func(params PostCustomerCustomerIDFixedPricePriceIDBookParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDFixedPricePriceIDBook has not yet been implemented")
		}),
		PostCustomerCustomerIDFixedPricePriceIDReviewHandler: PostCustomerCustomerIDFixedPricePriceIDReviewHandlerFunc(func(params PostCustomerCustomerIDFixedPricePriceIDReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDFixedPricePriceIDReview has not yet been implemented")
		}),
		PostCustomerCustomerIDLogoutHandler: PostCustomerCustomerIDLogoutHandlerFunc(func(params PostCustomerCustomerIDLogoutParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDLogout has not yet been implemented")
		}),
		PostCustomerCustomerIDQuoteQuoteIDAcceptHandler: PostCustomerCustomerIDQuoteQuoteIDAcceptHandlerFunc(func(params PostCustomerCustomerIDQuoteQuoteIDAcceptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDQuoteQuoteIDAccept has not yet been implemented")
		}),
		PostCustomerCustomerIDQuoteQuoteIDRequestHandler: PostCustomerCustomerIDQuoteQuoteIDRequestHandlerFunc(func(params PostCustomerCustomerIDQuoteQuoteIDRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDQuoteQuoteIDRequest has not yet been implemented")
		}),
		PostCustomerCustomerIDQuoteQuoteIDReviewHandler: PostCustomerCustomerIDQuoteQuoteIDReviewHandlerFunc(func(params PostCustomerCustomerIDQuoteQuoteIDReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDQuoteQuoteIDReview has not yet been implemented")
		}),
		PostCustomerCustomerIDSubscriptionPriceIDBookHandler: PostCustomerCustomerIDSubscriptionPriceIDBookHandlerFunc(func(params PostCustomerCustomerIDSubscriptionPriceIDBookParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDSubscriptionPriceIDBook has not yet been implemented")
		}),
		PostCustomerCustomerIDSubscriptionPriceIDReviewHandler: PostCustomerCustomerIDSubscriptionPriceIDReviewHandlerFunc(func(params PostCustomerCustomerIDSubscriptionPriceIDReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDSubscriptionPriceIDReview has not yet been implemented")
		}),
		PostCustomerCustomerIDVerifyHandler: PostCustomerCustomerIDVerifyHandlerFunc(func(params PostCustomerCustomerIDVerifyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerCustomerIDVerify has not yet been implemented")
		}),
		PostCustomerLoginHandler: PostCustomerLoginHandlerFunc(func(params PostCustomerLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PostCustomerLogin has not yet been implemented")
		}),
		PostResetEmailHandler: PostResetEmailHandlerFunc(func(params PostResetEmailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostResetEmail has not yet been implemented")
		}),
		PostResetPasswordHandler: PostResetPasswordHandlerFunc(func(params PostResetPasswordParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostResetPassword has not yet been implemented")
		}),
		PostTradespersonHandler: PostTradespersonHandlerFunc(func(params PostTradespersonParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradesperson has not yet been implemented")
		}),
		PostTradespersonLoginHandler: PostTradespersonLoginHandlerFunc(func(params PostTradespersonLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonLogin has not yet been implemented")
		}),
		PostTradespersonTradespersonIDAccessTokenHandler: PostTradespersonTradespersonIDAccessTokenHandlerFunc(func(params PostTradespersonTradespersonIDAccessTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDAccessToken has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler: PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandlerFunc(func(params PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefund has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler: PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandlerFunc(func(params PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancel has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler: PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandlerFunc(func(params PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalize has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler: PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandlerFunc(func(params PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefund has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler: PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandlerFunc(func(params PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectible has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler: PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandlerFunc(func(params PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoid has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingManualInvoiceHandler: PostTradespersonTradespersonIDBillingManualInvoiceHandlerFunc(func(params PostTradespersonTradespersonIDBillingManualInvoiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingManualInvoice has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler: PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandlerFunc(func(params PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefund has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler: PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandlerFunc(func(params PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectible has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler: PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandlerFunc(func(params PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoid has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDCancel has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalize has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalize has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefund has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectible has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoid has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler: PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandlerFunc(func(params PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingQuoteQuoteIDRevise has not yet been implemented")
		}),
		PostTradespersonTradespersonIDCouponHandler: PostTradespersonTradespersonIDCouponHandlerFunc(func(params PostTradespersonTradespersonIDCouponParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDCoupon has not yet been implemented")
		}),
		PostTradespersonTradespersonIDCouponCouponIDPromoHandler: PostTradespersonTradespersonIDCouponCouponIDPromoHandlerFunc(func(params PostTradespersonTradespersonIDCouponCouponIDPromoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDCouponCouponIDPromo has not yet been implemented")
		}),
		PostTradespersonTradespersonIDEmailHandler: PostTradespersonTradespersonIDEmailHandlerFunc(func(params PostTradespersonTradespersonIDEmailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDEmail has not yet been implemented")
		}),
		PostTradespersonTradespersonIDFixedPriceHandler: PostTradespersonTradespersonIDFixedPriceHandlerFunc(func(params PostTradespersonTradespersonIDFixedPriceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDFixedPrice has not yet been implemented")
		}),
		PostTradespersonTradespersonIDFixedPriceReviewHandler: PostTradespersonTradespersonIDFixedPriceReviewHandlerFunc(func(params PostTradespersonTradespersonIDFixedPriceReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDFixedPriceReview has not yet been implemented")
		}),
		PostTradespersonTradespersonIDGoogleTokenHandler: PostTradespersonTradespersonIDGoogleTokenHandlerFunc(func(params PostTradespersonTradespersonIDGoogleTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDGoogleToken has not yet been implemented")
		}),
		PostTradespersonTradespersonIDLogoutHandler: PostTradespersonTradespersonIDLogoutHandlerFunc(func(params PostTradespersonTradespersonIDLogoutParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDLogout has not yet been implemented")
		}),
		PostTradespersonTradespersonIDQuoteHandler: PostTradespersonTradespersonIDQuoteHandlerFunc(func(params PostTradespersonTradespersonIDQuoteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDQuote has not yet been implemented")
		}),
		PostTradespersonTradespersonIDQuoteReviewHandler: PostTradespersonTradespersonIDQuoteReviewHandlerFunc(func(params PostTradespersonTradespersonIDQuoteReviewParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDQuoteReview has not yet been implemented")
		}),
		PutCustomerCustomerIDHandler: PutCustomerCustomerIDHandlerFunc(func(params PutCustomerCustomerIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutCustomerCustomerID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDHandler: PutTradespersonTradespersonIDHandlerFunc(func(params PutTradespersonTradespersonIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler: PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandlerFunc(func(params PutTradespersonTradespersonIDBillingInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDBillingInvoiceInvoiceID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler: PutTradespersonTradespersonIDBillingQuoteQuoteIDHandlerFunc(func(params PutTradespersonTradespersonIDBillingQuoteQuoteIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDBillingQuoteQuoteID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler: PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandlerFunc(func(params PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDBrandingHandler: PutTradespersonTradespersonIDBrandingHandlerFunc(func(params PutTradespersonTradespersonIDBrandingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDBranding has not yet been implemented")
		}),
		PutTradespersonTradespersonIDCouponCouponIDHandler: PutTradespersonTradespersonIDCouponCouponIDHandlerFunc(func(params PutTradespersonTradespersonIDCouponCouponIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDCouponCouponID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDFixedPricePriceIDHandler: PutTradespersonTradespersonIDFixedPricePriceIDHandlerFunc(func(params PutTradespersonTradespersonIDFixedPricePriceIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDFixedPricePriceID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDGoogleTokenHandler: PutTradespersonTradespersonIDGoogleTokenHandlerFunc(func(params PutTradespersonTradespersonIDGoogleTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDGoogleToken has not yet been implemented")
		}),
		PutTradespersonTradespersonIDProfileHandler: PutTradespersonTradespersonIDProfileHandlerFunc(func(params PutTradespersonTradespersonIDProfileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDProfile has not yet been implemented")
		}),
		PutTradespersonTradespersonIDPromoPromoIDHandler: PutTradespersonTradespersonIDPromoPromoIDHandlerFunc(func(params PutTradespersonTradespersonIDPromoPromoIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDPromoPromoID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDQuoteQuoteIDHandler: PutTradespersonTradespersonIDQuoteQuoteIDHandlerFunc(func(params PutTradespersonTradespersonIDQuoteQuoteIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDQuoteQuoteID has not yet been implemented")
		}),
		PutTradespersonTradespersonIDSettingsHandler: PutTradespersonTradespersonIDSettingsHandlerFunc(func(params PutTradespersonTradespersonIDSettingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDSettings has not yet been implemented")
		}),
		PutTradespersonTradespersonIDTimeZoneHandler: PutTradespersonTradespersonIDTimeZoneHandlerFunc(func(params PutTradespersonTradespersonIDTimeZoneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDTimeZone has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (Bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*RedbudWayAPIAPI API description in Markdown. */
type RedbudWayAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/pdf
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DeleteCustomerCustomerIDHandler sets the operation handler for the delete customer customer ID operation
	DeleteCustomerCustomerIDHandler DeleteCustomerCustomerIDHandler
	// DeleteTradespersonTradespersonIDHandler sets the operation handler for the delete tradesperson tradesperson ID operation
	DeleteTradespersonTradespersonIDHandler DeleteTradespersonTradespersonIDHandler
	// DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler sets the operation handler for the delete tradesperson tradesperson ID billing invoice invoice ID operation
	DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler
	// DeleteTradespersonTradespersonIDCouponCouponIDHandler sets the operation handler for the delete tradesperson tradesperson ID coupon coupon ID operation
	DeleteTradespersonTradespersonIDCouponCouponIDHandler DeleteTradespersonTradespersonIDCouponCouponIDHandler
	// DeleteTradespersonTradespersonIDGoogleTokenHandler sets the operation handler for the delete tradesperson tradesperson ID google token operation
	DeleteTradespersonTradespersonIDGoogleTokenHandler DeleteTradespersonTradespersonIDGoogleTokenHandler
	// DeleteTradespersonTradespersonIDPromoPromoIDHandler sets the operation handler for the delete tradesperson tradesperson ID promo promo ID operation
	DeleteTradespersonTradespersonIDPromoPromoIDHandler DeleteTradespersonTradespersonIDPromoPromoIDHandler
	// GetAddressHandler sets the operation handler for the get address operation
	GetAddressHandler GetAddressHandler
	// GetAdminAdminIDAccessTokenHandler sets the operation handler for the get admin admin ID access token operation
	GetAdminAdminIDAccessTokenHandler GetAdminAdminIDAccessTokenHandler
	// GetAdminAdminIDTradespeopleHandler sets the operation handler for the get admin admin ID tradespeople operation
	GetAdminAdminIDTradespeopleHandler GetAdminAdminIDTradespeopleHandler
	// GetCustomerCustomerIDAccessTokenHandler sets the operation handler for the get customer customer ID access token operation
	GetCustomerCustomerIDAccessTokenHandler GetCustomerCustomerIDAccessTokenHandler
	// GetCustomerCustomerIDBillingLinkHandler sets the operation handler for the get customer customer ID billing link operation
	GetCustomerCustomerIDBillingLinkHandler GetCustomerCustomerIDBillingLinkHandler
	// GetCustomerCustomerIDBookingsHandler sets the operation handler for the get customer customer ID bookings operation
	GetCustomerCustomerIDBookingsHandler GetCustomerCustomerIDBookingsHandler
	// GetCustomerCustomerIDFixedPricePriceIDReviewHandler sets the operation handler for the get customer customer ID fixed price price ID review operation
	GetCustomerCustomerIDFixedPricePriceIDReviewHandler GetCustomerCustomerIDFixedPricePriceIDReviewHandler
	// GetCustomerCustomerIDPaymentDefaultHandler sets the operation handler for the get customer customer ID payment default operation
	GetCustomerCustomerIDPaymentDefaultHandler GetCustomerCustomerIDPaymentDefaultHandler
	// GetCustomerCustomerIDPromoHandler sets the operation handler for the get customer customer ID promo operation
	GetCustomerCustomerIDPromoHandler GetCustomerCustomerIDPromoHandler
	// GetCustomerCustomerIDQuoteQuoteIDHandler sets the operation handler for the get customer customer ID quote quote ID operation
	GetCustomerCustomerIDQuoteQuoteIDHandler GetCustomerCustomerIDQuoteQuoteIDHandler
	// GetCustomerCustomerIDQuoteQuoteIDReviewHandler sets the operation handler for the get customer customer ID quote quote ID review operation
	GetCustomerCustomerIDQuoteQuoteIDReviewHandler GetCustomerCustomerIDQuoteQuoteIDReviewHandler
	// GetCustomerCustomerIDQuotesHandler sets the operation handler for the get customer customer ID quotes operation
	GetCustomerCustomerIDQuotesHandler GetCustomerCustomerIDQuotesHandler
	// GetCustomerCustomerIDReverifyHandler sets the operation handler for the get customer customer ID reverify operation
	GetCustomerCustomerIDReverifyHandler GetCustomerCustomerIDReverifyHandler
	// GetCustomerCustomerIDSubscriptionPriceIDReviewHandler sets the operation handler for the get customer customer ID subscription price ID review operation
	GetCustomerCustomerIDSubscriptionPriceIDReviewHandler GetCustomerCustomerIDSubscriptionPriceIDReviewHandler
	// GetCustomerCustomerIDVerifyHandler sets the operation handler for the get customer customer ID verify operation
	GetCustomerCustomerIDVerifyHandler GetCustomerCustomerIDVerifyHandler
	// GetFixedPricePagesHandler sets the operation handler for the get fixed price pages operation
	GetFixedPricePagesHandler GetFixedPricePagesHandler
	// GetFixedPricePriceIDHandler sets the operation handler for the get fixed price price ID operation
	GetFixedPricePriceIDHandler GetFixedPricePriceIDHandler
	// GetFixedPricePriceIDReviewsHandler sets the operation handler for the get fixed price price ID reviews operation
	GetFixedPricePriceIDReviewsHandler GetFixedPricePriceIDReviewsHandler
	// GetFixedPricesHandler sets the operation handler for the get fixed prices operation
	GetFixedPricesHandler GetFixedPricesHandler
	// GetForgotPasswordHandler sets the operation handler for the get forgot password operation
	GetForgotPasswordHandler GetForgotPasswordHandler
	// GetLocationHandler sets the operation handler for the get location operation
	GetLocationHandler GetLocationHandler
	// GetProfileVanityOrIDHandler sets the operation handler for the get profile vanity or ID operation
	GetProfileVanityOrIDHandler GetProfileVanityOrIDHandler
	// GetProfileVanityOrIDFixedPricesHandler sets the operation handler for the get profile vanity or ID fixed prices operation
	GetProfileVanityOrIDFixedPricesHandler GetProfileVanityOrIDFixedPricesHandler
	// GetProfileVanityOrIDQuotesHandler sets the operation handler for the get profile vanity or ID quotes operation
	GetProfileVanityOrIDQuotesHandler GetProfileVanityOrIDQuotesHandler
	// GetQuotePagesHandler sets the operation handler for the get quote pages operation
	GetQuotePagesHandler GetQuotePagesHandler
	// GetQuoteQuoteIDHandler sets the operation handler for the get quote quote ID operation
	GetQuoteQuoteIDHandler GetQuoteQuoteIDHandler
	// GetQuoteQuoteIDReviewsHandler sets the operation handler for the get quote quote ID reviews operation
	GetQuoteQuoteIDReviewsHandler GetQuoteQuoteIDReviewsHandler
	// GetQuotesHandler sets the operation handler for the get quotes operation
	GetQuotesHandler GetQuotesHandler
	// GetTradespersonTradespersonIDHandler sets the operation handler for the get tradesperson tradesperson ID operation
	GetTradespersonTradespersonIDHandler GetTradespersonTradespersonIDHandler
	// GetTradespersonTradespersonIDAccessTokenHandler sets the operation handler for the get tradesperson tradesperson ID access token operation
	GetTradespersonTradespersonIDAccessTokenHandler GetTradespersonTradespersonIDAccessTokenHandler
	// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler sets the operation handler for the get tradesperson tradesperson ID billing customer stripe ID subscription subscription ID invoice invoice ID operation
	GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler
	// GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler sets the operation handler for the get tradesperson tradesperson ID billing customer stripe ID subscriptions operation
	GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler
	// GetTradespersonTradespersonIDBillingCustomersHandler sets the operation handler for the get tradesperson tradesperson ID billing customers operation
	GetTradespersonTradespersonIDBillingCustomersHandler GetTradespersonTradespersonIDBillingCustomersHandler
	// GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler sets the operation handler for the get tradesperson tradesperson ID billing invoice invoice ID operation
	GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler
	// GetTradespersonTradespersonIDBillingInvoicePagesHandler sets the operation handler for the get tradesperson tradesperson ID billing invoice pages operation
	GetTradespersonTradespersonIDBillingInvoicePagesHandler GetTradespersonTradespersonIDBillingInvoicePagesHandler
	// GetTradespersonTradespersonIDBillingInvoicesHandler sets the operation handler for the get tradesperson tradesperson ID billing invoices operation
	GetTradespersonTradespersonIDBillingInvoicesHandler GetTradespersonTradespersonIDBillingInvoicesHandler
	// GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler sets the operation handler for the get tradesperson tradesperson ID billing manual invoice invoice ID operation
	GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler
	// GetTradespersonTradespersonIDBillingManualInvoicePagesHandler sets the operation handler for the get tradesperson tradesperson ID billing manual invoice pages operation
	GetTradespersonTradespersonIDBillingManualInvoicePagesHandler GetTradespersonTradespersonIDBillingManualInvoicePagesHandler
	// GetTradespersonTradespersonIDBillingManualInvoicesHandler sets the operation handler for the get tradesperson tradesperson ID billing manual invoices operation
	GetTradespersonTradespersonIDBillingManualInvoicesHandler GetTradespersonTradespersonIDBillingManualInvoicesHandler
	// GetTradespersonTradespersonIDBillingQuotePagesHandler sets the operation handler for the get tradesperson tradesperson ID billing quote pages operation
	GetTradespersonTradespersonIDBillingQuotePagesHandler GetTradespersonTradespersonIDBillingQuotePagesHandler
	// GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler sets the operation handler for the get tradesperson tradesperson ID billing quote quote ID operation
	GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler
	// GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler sets the operation handler for the get tradesperson tradesperson ID billing quote quote ID invoice invoice ID operation
	GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler
	// GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler sets the operation handler for the get tradesperson tradesperson ID billing quote quote ID pdf operation
	GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler
	// GetTradespersonTradespersonIDBillingQuotesHandler sets the operation handler for the get tradesperson tradesperson ID billing quotes operation
	GetTradespersonTradespersonIDBillingQuotesHandler GetTradespersonTradespersonIDBillingQuotesHandler
	// GetTradespersonTradespersonIDBillingSubscriptionPagesHandler sets the operation handler for the get tradesperson tradesperson ID billing subscription pages operation
	GetTradespersonTradespersonIDBillingSubscriptionPagesHandler GetTradespersonTradespersonIDBillingSubscriptionPagesHandler
	// GetTradespersonTradespersonIDBillingSubscriptionsHandler sets the operation handler for the get tradesperson tradesperson ID billing subscriptions operation
	GetTradespersonTradespersonIDBillingSubscriptionsHandler GetTradespersonTradespersonIDBillingSubscriptionsHandler
	// GetTradespersonTradespersonIDBrandingHandler sets the operation handler for the get tradesperson tradesperson ID branding operation
	GetTradespersonTradespersonIDBrandingHandler GetTradespersonTradespersonIDBrandingHandler
	// GetTradespersonTradespersonIDCouponCouponIDHandler sets the operation handler for the get tradesperson tradesperson ID coupon coupon ID operation
	GetTradespersonTradespersonIDCouponCouponIDHandler GetTradespersonTradespersonIDCouponCouponIDHandler
	// GetTradespersonTradespersonIDDiscountsHandler sets the operation handler for the get tradesperson tradesperson ID discounts operation
	GetTradespersonTradespersonIDDiscountsHandler GetTradespersonTradespersonIDDiscountsHandler
	// GetTradespersonTradespersonIDFixedPricePagesHandler sets the operation handler for the get tradesperson tradesperson ID fixed price pages operation
	GetTradespersonTradespersonIDFixedPricePagesHandler GetTradespersonTradespersonIDFixedPricePagesHandler
	// GetTradespersonTradespersonIDFixedPricePriceIDHandler sets the operation handler for the get tradesperson tradesperson ID fixed price price ID operation
	GetTradespersonTradespersonIDFixedPricePriceIDHandler GetTradespersonTradespersonIDFixedPricePriceIDHandler
	// GetTradespersonTradespersonIDFixedPriceReviewsHandler sets the operation handler for the get tradesperson tradesperson ID fixed price reviews operation
	GetTradespersonTradespersonIDFixedPriceReviewsHandler GetTradespersonTradespersonIDFixedPriceReviewsHandler
	// GetTradespersonTradespersonIDFixedPricesHandler sets the operation handler for the get tradesperson tradesperson ID fixed prices operation
	GetTradespersonTradespersonIDFixedPricesHandler GetTradespersonTradespersonIDFixedPricesHandler
	// GetTradespersonTradespersonIDLoginLinkHandler sets the operation handler for the get tradesperson tradesperson ID login link operation
	GetTradespersonTradespersonIDLoginLinkHandler GetTradespersonTradespersonIDLoginLinkHandler
	// GetTradespersonTradespersonIDOnboardHandler sets the operation handler for the get tradesperson tradesperson ID onboard operation
	GetTradespersonTradespersonIDOnboardHandler GetTradespersonTradespersonIDOnboardHandler
	// GetTradespersonTradespersonIDProfileHandler sets the operation handler for the get tradesperson tradesperson ID profile operation
	GetTradespersonTradespersonIDProfileHandler GetTradespersonTradespersonIDProfileHandler
	// GetTradespersonTradespersonIDPromoPromoIDHandler sets the operation handler for the get tradesperson tradesperson ID promo promo ID operation
	GetTradespersonTradespersonIDPromoPromoIDHandler GetTradespersonTradespersonIDPromoPromoIDHandler
	// GetTradespersonTradespersonIDQuotePagesHandler sets the operation handler for the get tradesperson tradesperson ID quote pages operation
	GetTradespersonTradespersonIDQuotePagesHandler GetTradespersonTradespersonIDQuotePagesHandler
	// GetTradespersonTradespersonIDQuoteQuoteIDHandler sets the operation handler for the get tradesperson tradesperson ID quote quote ID operation
	GetTradespersonTradespersonIDQuoteQuoteIDHandler GetTradespersonTradespersonIDQuoteQuoteIDHandler
	// GetTradespersonTradespersonIDQuoteReviewsHandler sets the operation handler for the get tradesperson tradesperson ID quote reviews operation
	GetTradespersonTradespersonIDQuoteReviewsHandler GetTradespersonTradespersonIDQuoteReviewsHandler
	// GetTradespersonTradespersonIDQuotesHandler sets the operation handler for the get tradesperson tradesperson ID quotes operation
	GetTradespersonTradespersonIDQuotesHandler GetTradespersonTradespersonIDQuotesHandler
	// GetTradespersonTradespersonIDScheduleHandler sets the operation handler for the get tradesperson tradesperson ID schedule operation
	GetTradespersonTradespersonIDScheduleHandler GetTradespersonTradespersonIDScheduleHandler
	// GetTradespersonTradespersonIDServicesHandler sets the operation handler for the get tradesperson tradesperson ID services operation
	GetTradespersonTradespersonIDServicesHandler GetTradespersonTradespersonIDServicesHandler
	// GetTradespersonTradespersonIDSettingsHandler sets the operation handler for the get tradesperson tradesperson ID settings operation
	GetTradespersonTradespersonIDSettingsHandler GetTradespersonTradespersonIDSettingsHandler
	// GetTradespersonTradespersonIDSyncHandler sets the operation handler for the get tradesperson tradesperson ID sync operation
	GetTradespersonTradespersonIDSyncHandler GetTradespersonTradespersonIDSyncHandler
	// GetTradespersonTradespersonIDTimeSlotsHandler sets the operation handler for the get tradesperson tradesperson ID time slots operation
	GetTradespersonTradespersonIDTimeSlotsHandler GetTradespersonTradespersonIDTimeSlotsHandler
	// PostCustomerHandler sets the operation handler for the post customer operation
	PostCustomerHandler PostCustomerHandler
	// PostCustomerCustomerIDAccessTokenHandler sets the operation handler for the post customer customer ID access token operation
	PostCustomerCustomerIDAccessTokenHandler PostCustomerCustomerIDAccessTokenHandler
	// PostCustomerCustomerIDFixedPricePriceIDBookHandler sets the operation handler for the post customer customer ID fixed price price ID book operation
	PostCustomerCustomerIDFixedPricePriceIDBookHandler PostCustomerCustomerIDFixedPricePriceIDBookHandler
	// PostCustomerCustomerIDFixedPricePriceIDReviewHandler sets the operation handler for the post customer customer ID fixed price price ID review operation
	PostCustomerCustomerIDFixedPricePriceIDReviewHandler PostCustomerCustomerIDFixedPricePriceIDReviewHandler
	// PostCustomerCustomerIDLogoutHandler sets the operation handler for the post customer customer ID logout operation
	PostCustomerCustomerIDLogoutHandler PostCustomerCustomerIDLogoutHandler
	// PostCustomerCustomerIDQuoteQuoteIDAcceptHandler sets the operation handler for the post customer customer ID quote quote ID accept operation
	PostCustomerCustomerIDQuoteQuoteIDAcceptHandler PostCustomerCustomerIDQuoteQuoteIDAcceptHandler
	// PostCustomerCustomerIDQuoteQuoteIDRequestHandler sets the operation handler for the post customer customer ID quote quote ID request operation
	PostCustomerCustomerIDQuoteQuoteIDRequestHandler PostCustomerCustomerIDQuoteQuoteIDRequestHandler
	// PostCustomerCustomerIDQuoteQuoteIDReviewHandler sets the operation handler for the post customer customer ID quote quote ID review operation
	PostCustomerCustomerIDQuoteQuoteIDReviewHandler PostCustomerCustomerIDQuoteQuoteIDReviewHandler
	// PostCustomerCustomerIDSubscriptionPriceIDBookHandler sets the operation handler for the post customer customer ID subscription price ID book operation
	PostCustomerCustomerIDSubscriptionPriceIDBookHandler PostCustomerCustomerIDSubscriptionPriceIDBookHandler
	// PostCustomerCustomerIDSubscriptionPriceIDReviewHandler sets the operation handler for the post customer customer ID subscription price ID review operation
	PostCustomerCustomerIDSubscriptionPriceIDReviewHandler PostCustomerCustomerIDSubscriptionPriceIDReviewHandler
	// PostCustomerCustomerIDVerifyHandler sets the operation handler for the post customer customer ID verify operation
	PostCustomerCustomerIDVerifyHandler PostCustomerCustomerIDVerifyHandler
	// PostCustomerLoginHandler sets the operation handler for the post customer login operation
	PostCustomerLoginHandler PostCustomerLoginHandler
	// PostResetEmailHandler sets the operation handler for the post reset email operation
	PostResetEmailHandler PostResetEmailHandler
	// PostResetPasswordHandler sets the operation handler for the post reset password operation
	PostResetPasswordHandler PostResetPasswordHandler
	// PostTradespersonHandler sets the operation handler for the post tradesperson operation
	PostTradespersonHandler PostTradespersonHandler
	// PostTradespersonLoginHandler sets the operation handler for the post tradesperson login operation
	PostTradespersonLoginHandler PostTradespersonLoginHandler
	// PostTradespersonTradespersonIDAccessTokenHandler sets the operation handler for the post tradesperson tradesperson ID access token operation
	PostTradespersonTradespersonIDAccessTokenHandler PostTradespersonTradespersonIDAccessTokenHandler
	// PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler sets the operation handler for the post tradesperson tradesperson ID billing customer stripe ID subscription subscription ID invoice invoice ID refund operation
	PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler
	// PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler sets the operation handler for the post tradesperson tradesperson ID billing customer stripe ID subscriptions cancel operation
	PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler
	// PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler sets the operation handler for the post tradesperson tradesperson ID billing invoice invoice ID finalize operation
	PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler
	// PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler sets the operation handler for the post tradesperson tradesperson ID billing invoice invoice ID refund operation
	PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler
	// PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler sets the operation handler for the post tradesperson tradesperson ID billing invoice invoice ID uncollectible operation
	PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler
	// PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler sets the operation handler for the post tradesperson tradesperson ID billing invoice invoice ID void operation
	PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler
	// PostTradespersonTradespersonIDBillingManualInvoiceHandler sets the operation handler for the post tradesperson tradesperson ID billing manual invoice operation
	PostTradespersonTradespersonIDBillingManualInvoiceHandler PostTradespersonTradespersonIDBillingManualInvoiceHandler
	// PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler sets the operation handler for the post tradesperson tradesperson ID billing manual invoice invoice ID refund operation
	PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler
	// PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler sets the operation handler for the post tradesperson tradesperson ID billing manual invoice invoice ID uncollectible operation
	PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler
	// PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler sets the operation handler for the post tradesperson tradesperson ID billing manual invoice invoice ID void operation
	PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID cancel operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID finalize operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID invoice invoice ID finalize operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID invoice invoice ID refund operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID invoice invoice ID uncollectible operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID invoice invoice ID void operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler
	// PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler sets the operation handler for the post tradesperson tradesperson ID billing quote quote ID revise operation
	PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler
	// PostTradespersonTradespersonIDCouponHandler sets the operation handler for the post tradesperson tradesperson ID coupon operation
	PostTradespersonTradespersonIDCouponHandler PostTradespersonTradespersonIDCouponHandler
	// PostTradespersonTradespersonIDCouponCouponIDPromoHandler sets the operation handler for the post tradesperson tradesperson ID coupon coupon ID promo operation
	PostTradespersonTradespersonIDCouponCouponIDPromoHandler PostTradespersonTradespersonIDCouponCouponIDPromoHandler
	// PostTradespersonTradespersonIDEmailHandler sets the operation handler for the post tradesperson tradesperson ID email operation
	PostTradespersonTradespersonIDEmailHandler PostTradespersonTradespersonIDEmailHandler
	// PostTradespersonTradespersonIDFixedPriceHandler sets the operation handler for the post tradesperson tradesperson ID fixed price operation
	PostTradespersonTradespersonIDFixedPriceHandler PostTradespersonTradespersonIDFixedPriceHandler
	// PostTradespersonTradespersonIDFixedPriceReviewHandler sets the operation handler for the post tradesperson tradesperson ID fixed price review operation
	PostTradespersonTradespersonIDFixedPriceReviewHandler PostTradespersonTradespersonIDFixedPriceReviewHandler
	// PostTradespersonTradespersonIDGoogleTokenHandler sets the operation handler for the post tradesperson tradesperson ID google token operation
	PostTradespersonTradespersonIDGoogleTokenHandler PostTradespersonTradespersonIDGoogleTokenHandler
	// PostTradespersonTradespersonIDLogoutHandler sets the operation handler for the post tradesperson tradesperson ID logout operation
	PostTradespersonTradespersonIDLogoutHandler PostTradespersonTradespersonIDLogoutHandler
	// PostTradespersonTradespersonIDQuoteHandler sets the operation handler for the post tradesperson tradesperson ID quote operation
	PostTradespersonTradespersonIDQuoteHandler PostTradespersonTradespersonIDQuoteHandler
	// PostTradespersonTradespersonIDQuoteReviewHandler sets the operation handler for the post tradesperson tradesperson ID quote review operation
	PostTradespersonTradespersonIDQuoteReviewHandler PostTradespersonTradespersonIDQuoteReviewHandler
	// PutCustomerCustomerIDHandler sets the operation handler for the put customer customer ID operation
	PutCustomerCustomerIDHandler PutCustomerCustomerIDHandler
	// PutTradespersonTradespersonIDHandler sets the operation handler for the put tradesperson tradesperson ID operation
	PutTradespersonTradespersonIDHandler PutTradespersonTradespersonIDHandler
	// PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler sets the operation handler for the put tradesperson tradesperson ID billing invoice invoice ID operation
	PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler
	// PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler sets the operation handler for the put tradesperson tradesperson ID billing quote quote ID operation
	PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler
	// PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler sets the operation handler for the put tradesperson tradesperson ID billing quote quote ID invoice invoice ID operation
	PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler
	// PutTradespersonTradespersonIDBrandingHandler sets the operation handler for the put tradesperson tradesperson ID branding operation
	PutTradespersonTradespersonIDBrandingHandler PutTradespersonTradespersonIDBrandingHandler
	// PutTradespersonTradespersonIDCouponCouponIDHandler sets the operation handler for the put tradesperson tradesperson ID coupon coupon ID operation
	PutTradespersonTradespersonIDCouponCouponIDHandler PutTradespersonTradespersonIDCouponCouponIDHandler
	// PutTradespersonTradespersonIDFixedPricePriceIDHandler sets the operation handler for the put tradesperson tradesperson ID fixed price price ID operation
	PutTradespersonTradespersonIDFixedPricePriceIDHandler PutTradespersonTradespersonIDFixedPricePriceIDHandler
	// PutTradespersonTradespersonIDGoogleTokenHandler sets the operation handler for the put tradesperson tradesperson ID google token operation
	PutTradespersonTradespersonIDGoogleTokenHandler PutTradespersonTradespersonIDGoogleTokenHandler
	// PutTradespersonTradespersonIDProfileHandler sets the operation handler for the put tradesperson tradesperson ID profile operation
	PutTradespersonTradespersonIDProfileHandler PutTradespersonTradespersonIDProfileHandler
	// PutTradespersonTradespersonIDPromoPromoIDHandler sets the operation handler for the put tradesperson tradesperson ID promo promo ID operation
	PutTradespersonTradespersonIDPromoPromoIDHandler PutTradespersonTradespersonIDPromoPromoIDHandler
	// PutTradespersonTradespersonIDQuoteQuoteIDHandler sets the operation handler for the put tradesperson tradesperson ID quote quote ID operation
	PutTradespersonTradespersonIDQuoteQuoteIDHandler PutTradespersonTradespersonIDQuoteQuoteIDHandler
	// PutTradespersonTradespersonIDSettingsHandler sets the operation handler for the put tradesperson tradesperson ID settings operation
	PutTradespersonTradespersonIDSettingsHandler PutTradespersonTradespersonIDSettingsHandler
	// PutTradespersonTradespersonIDTimeZoneHandler sets the operation handler for the put tradesperson tradesperson ID time zone operation
	PutTradespersonTradespersonIDTimeZoneHandler PutTradespersonTradespersonIDTimeZoneHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *RedbudWayAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *RedbudWayAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *RedbudWayAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RedbudWayAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RedbudWayAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RedbudWayAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RedbudWayAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RedbudWayAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RedbudWayAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RedbudWayAPIAPI
func (o *RedbudWayAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.DeleteCustomerCustomerIDHandler == nil {
		unregistered = append(unregistered, "DeleteCustomerCustomerIDHandler")
	}
	if o.DeleteTradespersonTradespersonIDHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonTradespersonIDHandler")
	}
	if o.DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler")
	}
	if o.DeleteTradespersonTradespersonIDCouponCouponIDHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonTradespersonIDCouponCouponIDHandler")
	}
	if o.DeleteTradespersonTradespersonIDGoogleTokenHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonTradespersonIDGoogleTokenHandler")
	}
	if o.DeleteTradespersonTradespersonIDPromoPromoIDHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonTradespersonIDPromoPromoIDHandler")
	}
	if o.GetAddressHandler == nil {
		unregistered = append(unregistered, "GetAddressHandler")
	}
	if o.GetAdminAdminIDAccessTokenHandler == nil {
		unregistered = append(unregistered, "GetAdminAdminIDAccessTokenHandler")
	}
	if o.GetAdminAdminIDTradespeopleHandler == nil {
		unregistered = append(unregistered, "GetAdminAdminIDTradespeopleHandler")
	}
	if o.GetCustomerCustomerIDAccessTokenHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDAccessTokenHandler")
	}
	if o.GetCustomerCustomerIDBillingLinkHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDBillingLinkHandler")
	}
	if o.GetCustomerCustomerIDBookingsHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDBookingsHandler")
	}
	if o.GetCustomerCustomerIDFixedPricePriceIDReviewHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDFixedPricePriceIDReviewHandler")
	}
	if o.GetCustomerCustomerIDPaymentDefaultHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDPaymentDefaultHandler")
	}
	if o.GetCustomerCustomerIDPromoHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDPromoHandler")
	}
	if o.GetCustomerCustomerIDQuoteQuoteIDHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDQuoteQuoteIDHandler")
	}
	if o.GetCustomerCustomerIDQuoteQuoteIDReviewHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDQuoteQuoteIDReviewHandler")
	}
	if o.GetCustomerCustomerIDQuotesHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDQuotesHandler")
	}
	if o.GetCustomerCustomerIDReverifyHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDReverifyHandler")
	}
	if o.GetCustomerCustomerIDSubscriptionPriceIDReviewHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDSubscriptionPriceIDReviewHandler")
	}
	if o.GetCustomerCustomerIDVerifyHandler == nil {
		unregistered = append(unregistered, "GetCustomerCustomerIDVerifyHandler")
	}
	if o.GetFixedPricePagesHandler == nil {
		unregistered = append(unregistered, "GetFixedPricePagesHandler")
	}
	if o.GetFixedPricePriceIDHandler == nil {
		unregistered = append(unregistered, "GetFixedPricePriceIDHandler")
	}
	if o.GetFixedPricePriceIDReviewsHandler == nil {
		unregistered = append(unregistered, "GetFixedPricePriceIDReviewsHandler")
	}
	if o.GetFixedPricesHandler == nil {
		unregistered = append(unregistered, "GetFixedPricesHandler")
	}
	if o.GetForgotPasswordHandler == nil {
		unregistered = append(unregistered, "GetForgotPasswordHandler")
	}
	if o.GetLocationHandler == nil {
		unregistered = append(unregistered, "GetLocationHandler")
	}
	if o.GetProfileVanityOrIDHandler == nil {
		unregistered = append(unregistered, "GetProfileVanityOrIDHandler")
	}
	if o.GetProfileVanityOrIDFixedPricesHandler == nil {
		unregistered = append(unregistered, "GetProfileVanityOrIDFixedPricesHandler")
	}
	if o.GetProfileVanityOrIDQuotesHandler == nil {
		unregistered = append(unregistered, "GetProfileVanityOrIDQuotesHandler")
	}
	if o.GetQuotePagesHandler == nil {
		unregistered = append(unregistered, "GetQuotePagesHandler")
	}
	if o.GetQuoteQuoteIDHandler == nil {
		unregistered = append(unregistered, "GetQuoteQuoteIDHandler")
	}
	if o.GetQuoteQuoteIDReviewsHandler == nil {
		unregistered = append(unregistered, "GetQuoteQuoteIDReviewsHandler")
	}
	if o.GetQuotesHandler == nil {
		unregistered = append(unregistered, "GetQuotesHandler")
	}
	if o.GetTradespersonTradespersonIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDHandler")
	}
	if o.GetTradespersonTradespersonIDAccessTokenHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDAccessTokenHandler")
	}
	if o.GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler")
	}
	if o.GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler")
	}
	if o.GetTradespersonTradespersonIDBillingCustomersHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingCustomersHandler")
	}
	if o.GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler")
	}
	if o.GetTradespersonTradespersonIDBillingInvoicePagesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingInvoicePagesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingInvoicesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingInvoicesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler")
	}
	if o.GetTradespersonTradespersonIDBillingManualInvoicePagesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingManualInvoicePagesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingManualInvoicesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingManualInvoicesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingQuotePagesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingQuotePagesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler")
	}
	if o.GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler")
	}
	if o.GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler")
	}
	if o.GetTradespersonTradespersonIDBillingQuotesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingQuotesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingSubscriptionPagesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingSubscriptionPagesHandler")
	}
	if o.GetTradespersonTradespersonIDBillingSubscriptionsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingSubscriptionsHandler")
	}
	if o.GetTradespersonTradespersonIDBrandingHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBrandingHandler")
	}
	if o.GetTradespersonTradespersonIDCouponCouponIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDCouponCouponIDHandler")
	}
	if o.GetTradespersonTradespersonIDDiscountsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDDiscountsHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPricePagesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPricePagesHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPricePriceIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPricePriceIDHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPriceReviewsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPriceReviewsHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPricesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPricesHandler")
	}
	if o.GetTradespersonTradespersonIDLoginLinkHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDLoginLinkHandler")
	}
	if o.GetTradespersonTradespersonIDOnboardHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDOnboardHandler")
	}
	if o.GetTradespersonTradespersonIDProfileHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDProfileHandler")
	}
	if o.GetTradespersonTradespersonIDPromoPromoIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDPromoPromoIDHandler")
	}
	if o.GetTradespersonTradespersonIDQuotePagesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuotePagesHandler")
	}
	if o.GetTradespersonTradespersonIDQuoteQuoteIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuoteQuoteIDHandler")
	}
	if o.GetTradespersonTradespersonIDQuoteReviewsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuoteReviewsHandler")
	}
	if o.GetTradespersonTradespersonIDQuotesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuotesHandler")
	}
	if o.GetTradespersonTradespersonIDScheduleHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDScheduleHandler")
	}
	if o.GetTradespersonTradespersonIDServicesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDServicesHandler")
	}
	if o.GetTradespersonTradespersonIDSettingsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDSettingsHandler")
	}
	if o.GetTradespersonTradespersonIDSyncHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDSyncHandler")
	}
	if o.GetTradespersonTradespersonIDTimeSlotsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDTimeSlotsHandler")
	}
	if o.PostCustomerHandler == nil {
		unregistered = append(unregistered, "PostCustomerHandler")
	}
	if o.PostCustomerCustomerIDAccessTokenHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDAccessTokenHandler")
	}
	if o.PostCustomerCustomerIDFixedPricePriceIDBookHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDFixedPricePriceIDBookHandler")
	}
	if o.PostCustomerCustomerIDFixedPricePriceIDReviewHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDFixedPricePriceIDReviewHandler")
	}
	if o.PostCustomerCustomerIDLogoutHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDLogoutHandler")
	}
	if o.PostCustomerCustomerIDQuoteQuoteIDAcceptHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDQuoteQuoteIDAcceptHandler")
	}
	if o.PostCustomerCustomerIDQuoteQuoteIDRequestHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDQuoteQuoteIDRequestHandler")
	}
	if o.PostCustomerCustomerIDQuoteQuoteIDReviewHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDQuoteQuoteIDReviewHandler")
	}
	if o.PostCustomerCustomerIDSubscriptionPriceIDBookHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDSubscriptionPriceIDBookHandler")
	}
	if o.PostCustomerCustomerIDSubscriptionPriceIDReviewHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDSubscriptionPriceIDReviewHandler")
	}
	if o.PostCustomerCustomerIDVerifyHandler == nil {
		unregistered = append(unregistered, "PostCustomerCustomerIDVerifyHandler")
	}
	if o.PostCustomerLoginHandler == nil {
		unregistered = append(unregistered, "PostCustomerLoginHandler")
	}
	if o.PostResetEmailHandler == nil {
		unregistered = append(unregistered, "PostResetEmailHandler")
	}
	if o.PostResetPasswordHandler == nil {
		unregistered = append(unregistered, "PostResetPasswordHandler")
	}
	if o.PostTradespersonHandler == nil {
		unregistered = append(unregistered, "PostTradespersonHandler")
	}
	if o.PostTradespersonLoginHandler == nil {
		unregistered = append(unregistered, "PostTradespersonLoginHandler")
	}
	if o.PostTradespersonTradespersonIDAccessTokenHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDAccessTokenHandler")
	}
	if o.PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler")
	}
	if o.PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler")
	}
	if o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler")
	}
	if o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler")
	}
	if o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler")
	}
	if o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler")
	}
	if o.PostTradespersonTradespersonIDBillingManualInvoiceHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingManualInvoiceHandler")
	}
	if o.PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler")
	}
	if o.PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler")
	}
	if o.PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler")
	}
	if o.PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler")
	}
	if o.PostTradespersonTradespersonIDCouponHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDCouponHandler")
	}
	if o.PostTradespersonTradespersonIDCouponCouponIDPromoHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDCouponCouponIDPromoHandler")
	}
	if o.PostTradespersonTradespersonIDEmailHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDEmailHandler")
	}
	if o.PostTradespersonTradespersonIDFixedPriceHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDFixedPriceHandler")
	}
	if o.PostTradespersonTradespersonIDFixedPriceReviewHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDFixedPriceReviewHandler")
	}
	if o.PostTradespersonTradespersonIDGoogleTokenHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDGoogleTokenHandler")
	}
	if o.PostTradespersonTradespersonIDLogoutHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDLogoutHandler")
	}
	if o.PostTradespersonTradespersonIDQuoteHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDQuoteHandler")
	}
	if o.PostTradespersonTradespersonIDQuoteReviewHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDQuoteReviewHandler")
	}
	if o.PutCustomerCustomerIDHandler == nil {
		unregistered = append(unregistered, "PutCustomerCustomerIDHandler")
	}
	if o.PutTradespersonTradespersonIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDHandler")
	}
	if o.PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler")
	}
	if o.PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler")
	}
	if o.PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler")
	}
	if o.PutTradespersonTradespersonIDBrandingHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDBrandingHandler")
	}
	if o.PutTradespersonTradespersonIDCouponCouponIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDCouponCouponIDHandler")
	}
	if o.PutTradespersonTradespersonIDFixedPricePriceIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDFixedPricePriceIDHandler")
	}
	if o.PutTradespersonTradespersonIDGoogleTokenHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDGoogleTokenHandler")
	}
	if o.PutTradespersonTradespersonIDProfileHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDProfileHandler")
	}
	if o.PutTradespersonTradespersonIDPromoPromoIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDPromoPromoIDHandler")
	}
	if o.PutTradespersonTradespersonIDQuoteQuoteIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDQuoteQuoteIDHandler")
	}
	if o.PutTradespersonTradespersonIDSettingsHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDSettingsHandler")
	}
	if o.PutTradespersonTradespersonIDTimeZoneHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDTimeZoneHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RedbudWayAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RedbudWayAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *RedbudWayAPIAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *RedbudWayAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *RedbudWayAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/pdf":
			result["application/pdf"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RedbudWayAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the redbud way API API
func (o *RedbudWayAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RedbudWayAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/customer/{customerId}"] = NewDeleteCustomerCustomerID(o.context, o.DeleteCustomerCustomerIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/{tradespersonId}"] = NewDeleteTradespersonTradespersonID(o.context, o.DeleteTradespersonTradespersonIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}"] = NewDeleteTradespersonTradespersonIDBillingInvoiceInvoiceID(o.context, o.DeleteTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/{tradespersonId}/coupon/{couponId}"] = NewDeleteTradespersonTradespersonIDCouponCouponID(o.context, o.DeleteTradespersonTradespersonIDCouponCouponIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/{tradespersonId}/google-token"] = NewDeleteTradespersonTradespersonIDGoogleToken(o.context, o.DeleteTradespersonTradespersonIDGoogleTokenHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/{tradespersonId}/promo/{promoId}"] = NewDeleteTradespersonTradespersonIDPromoPromoID(o.context, o.DeleteTradespersonTradespersonIDPromoPromoIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/address"] = NewGetAddress(o.context, o.GetAddressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/{adminId}/access-token"] = NewGetAdminAdminIDAccessToken(o.context, o.GetAdminAdminIDAccessTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/{adminId}/tradespeople"] = NewGetAdminAdminIDTradespeople(o.context, o.GetAdminAdminIDTradespeopleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/access-token"] = NewGetCustomerCustomerIDAccessToken(o.context, o.GetCustomerCustomerIDAccessTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/billing-link"] = NewGetCustomerCustomerIDBillingLink(o.context, o.GetCustomerCustomerIDBillingLinkHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/bookings"] = NewGetCustomerCustomerIDBookings(o.context, o.GetCustomerCustomerIDBookingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/fixed-price/{priceId}/review"] = NewGetCustomerCustomerIDFixedPricePriceIDReview(o.context, o.GetCustomerCustomerIDFixedPricePriceIDReviewHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/payment/default"] = NewGetCustomerCustomerIDPaymentDefault(o.context, o.GetCustomerCustomerIDPaymentDefaultHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/promo"] = NewGetCustomerCustomerIDPromo(o.context, o.GetCustomerCustomerIDPromoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/quote/{quoteId}"] = NewGetCustomerCustomerIDQuoteQuoteID(o.context, o.GetCustomerCustomerIDQuoteQuoteIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/quote/{quoteId}/review"] = NewGetCustomerCustomerIDQuoteQuoteIDReview(o.context, o.GetCustomerCustomerIDQuoteQuoteIDReviewHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/quotes"] = NewGetCustomerCustomerIDQuotes(o.context, o.GetCustomerCustomerIDQuotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/reverify"] = NewGetCustomerCustomerIDReverify(o.context, o.GetCustomerCustomerIDReverifyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/subscription/{priceId}/review"] = NewGetCustomerCustomerIDSubscriptionPriceIDReview(o.context, o.GetCustomerCustomerIDSubscriptionPriceIDReviewHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}/verify"] = NewGetCustomerCustomerIDVerify(o.context, o.GetCustomerCustomerIDVerifyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fixed-price/pages"] = NewGetFixedPricePages(o.context, o.GetFixedPricePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fixed-price/{priceId}"] = NewGetFixedPricePriceID(o.context, o.GetFixedPricePriceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fixed-price/{priceId}/reviews"] = NewGetFixedPricePriceIDReviews(o.context, o.GetFixedPricePriceIDReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fixed-prices"] = NewGetFixedPrices(o.context, o.GetFixedPricesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forgot-password"] = NewGetForgotPassword(o.context, o.GetForgotPasswordHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/location"] = NewGetLocation(o.context, o.GetLocationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/{vanityOrId}"] = NewGetProfileVanityOrID(o.context, o.GetProfileVanityOrIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/{vanityOrId}/fixed-prices"] = NewGetProfileVanityOrIDFixedPrices(o.context, o.GetProfileVanityOrIDFixedPricesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/{vanityOrId}/quotes"] = NewGetProfileVanityOrIDQuotes(o.context, o.GetProfileVanityOrIDQuotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quote/pages"] = NewGetQuotePages(o.context, o.GetQuotePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quote/{quoteId}"] = NewGetQuoteQuoteID(o.context, o.GetQuoteQuoteIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quote/{quoteId}/reviews"] = NewGetQuoteQuoteIDReviews(o.context, o.GetQuoteQuoteIDReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quotes"] = NewGetQuotes(o.context, o.GetQuotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}"] = NewGetTradespersonTradespersonID(o.context, o.GetTradespersonTradespersonIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/access-token"] = NewGetTradespersonTradespersonIDAccessToken(o.context, o.GetTradespersonTradespersonIDAccessTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/customer/{stripeId}/subscription/{subscriptionId}/invoice/{invoiceId}"] = NewGetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceID(o.context, o.GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/customer/{stripeId}/subscriptions"] = NewGetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptions(o.context, o.GetTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/customers"] = NewGetTradespersonTradespersonIDBillingCustomers(o.context, o.GetTradespersonTradespersonIDBillingCustomersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}"] = NewGetTradespersonTradespersonIDBillingInvoiceInvoiceID(o.context, o.GetTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/invoice/pages"] = NewGetTradespersonTradespersonIDBillingInvoicePages(o.context, o.GetTradespersonTradespersonIDBillingInvoicePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/invoices"] = NewGetTradespersonTradespersonIDBillingInvoices(o.context, o.GetTradespersonTradespersonIDBillingInvoicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/manual-invoice/{invoiceId}"] = NewGetTradespersonTradespersonIDBillingManualInvoiceInvoiceID(o.context, o.GetTradespersonTradespersonIDBillingManualInvoiceInvoiceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/manual-invoice/pages"] = NewGetTradespersonTradespersonIDBillingManualInvoicePages(o.context, o.GetTradespersonTradespersonIDBillingManualInvoicePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/manual-invoices"] = NewGetTradespersonTradespersonIDBillingManualInvoices(o.context, o.GetTradespersonTradespersonIDBillingManualInvoicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/quote/pages"] = NewGetTradespersonTradespersonIDBillingQuotePages(o.context, o.GetTradespersonTradespersonIDBillingQuotePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}"] = NewGetTradespersonTradespersonIDBillingQuoteQuoteID(o.context, o.GetTradespersonTradespersonIDBillingQuoteQuoteIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId}"] = NewGetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID(o.context, o.GetTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/pdf"] = NewGetTradespersonTradespersonIDBillingQuoteQuoteIDPdf(o.context, o.GetTradespersonTradespersonIDBillingQuoteQuoteIDPdfHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/quotes"] = NewGetTradespersonTradespersonIDBillingQuotes(o.context, o.GetTradespersonTradespersonIDBillingQuotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/subscription/pages"] = NewGetTradespersonTradespersonIDBillingSubscriptionPages(o.context, o.GetTradespersonTradespersonIDBillingSubscriptionPagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/subscriptions"] = NewGetTradespersonTradespersonIDBillingSubscriptions(o.context, o.GetTradespersonTradespersonIDBillingSubscriptionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/branding"] = NewGetTradespersonTradespersonIDBranding(o.context, o.GetTradespersonTradespersonIDBrandingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/coupon/{couponId}"] = NewGetTradespersonTradespersonIDCouponCouponID(o.context, o.GetTradespersonTradespersonIDCouponCouponIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/discounts"] = NewGetTradespersonTradespersonIDDiscounts(o.context, o.GetTradespersonTradespersonIDDiscountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-price/pages"] = NewGetTradespersonTradespersonIDFixedPricePages(o.context, o.GetTradespersonTradespersonIDFixedPricePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-price/{priceId}"] = NewGetTradespersonTradespersonIDFixedPricePriceID(o.context, o.GetTradespersonTradespersonIDFixedPricePriceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-price/reviews"] = NewGetTradespersonTradespersonIDFixedPriceReviews(o.context, o.GetTradespersonTradespersonIDFixedPriceReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-prices"] = NewGetTradespersonTradespersonIDFixedPrices(o.context, o.GetTradespersonTradespersonIDFixedPricesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/login-link"] = NewGetTradespersonTradespersonIDLoginLink(o.context, o.GetTradespersonTradespersonIDLoginLinkHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/onboard"] = NewGetTradespersonTradespersonIDOnboard(o.context, o.GetTradespersonTradespersonIDOnboardHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/profile"] = NewGetTradespersonTradespersonIDProfile(o.context, o.GetTradespersonTradespersonIDProfileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/promo/{promoId}"] = NewGetTradespersonTradespersonIDPromoPromoID(o.context, o.GetTradespersonTradespersonIDPromoPromoIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quote/pages"] = NewGetTradespersonTradespersonIDQuotePages(o.context, o.GetTradespersonTradespersonIDQuotePagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quote/{quoteId}"] = NewGetTradespersonTradespersonIDQuoteQuoteID(o.context, o.GetTradespersonTradespersonIDQuoteQuoteIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quote/reviews"] = NewGetTradespersonTradespersonIDQuoteReviews(o.context, o.GetTradespersonTradespersonIDQuoteReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quotes"] = NewGetTradespersonTradespersonIDQuotes(o.context, o.GetTradespersonTradespersonIDQuotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/schedule"] = NewGetTradespersonTradespersonIDSchedule(o.context, o.GetTradespersonTradespersonIDScheduleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/services"] = NewGetTradespersonTradespersonIDServices(o.context, o.GetTradespersonTradespersonIDServicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/settings"] = NewGetTradespersonTradespersonIDSettings(o.context, o.GetTradespersonTradespersonIDSettingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/sync"] = NewGetTradespersonTradespersonIDSync(o.context, o.GetTradespersonTradespersonIDSyncHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/time-slots"] = NewGetTradespersonTradespersonIDTimeSlots(o.context, o.GetTradespersonTradespersonIDTimeSlotsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer"] = NewPostCustomer(o.context, o.PostCustomerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/access-token"] = NewPostCustomerCustomerIDAccessToken(o.context, o.PostCustomerCustomerIDAccessTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/fixed-price/{priceId}/book"] = NewPostCustomerCustomerIDFixedPricePriceIDBook(o.context, o.PostCustomerCustomerIDFixedPricePriceIDBookHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/fixed-price/{priceId}/review"] = NewPostCustomerCustomerIDFixedPricePriceIDReview(o.context, o.PostCustomerCustomerIDFixedPricePriceIDReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/logout"] = NewPostCustomerCustomerIDLogout(o.context, o.PostCustomerCustomerIDLogoutHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/quote/{quoteId}/accept"] = NewPostCustomerCustomerIDQuoteQuoteIDAccept(o.context, o.PostCustomerCustomerIDQuoteQuoteIDAcceptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/quote/{quoteId}/request"] = NewPostCustomerCustomerIDQuoteQuoteIDRequest(o.context, o.PostCustomerCustomerIDQuoteQuoteIDRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/quote/{quoteId}/review"] = NewPostCustomerCustomerIDQuoteQuoteIDReview(o.context, o.PostCustomerCustomerIDQuoteQuoteIDReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/subscription/{priceId}/book"] = NewPostCustomerCustomerIDSubscriptionPriceIDBook(o.context, o.PostCustomerCustomerIDSubscriptionPriceIDBookHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/subscription/{priceId}/review"] = NewPostCustomerCustomerIDSubscriptionPriceIDReview(o.context, o.PostCustomerCustomerIDSubscriptionPriceIDReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}/verify"] = NewPostCustomerCustomerIDVerify(o.context, o.PostCustomerCustomerIDVerifyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/login"] = NewPostCustomerLogin(o.context, o.PostCustomerLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/reset-email"] = NewPostResetEmail(o.context, o.PostResetEmailHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/reset-password"] = NewPostResetPassword(o.context, o.PostResetPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson"] = NewPostTradesperson(o.context, o.PostTradespersonHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/login"] = NewPostTradespersonLogin(o.context, o.PostTradespersonLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/access-token"] = NewPostTradespersonTradespersonIDAccessToken(o.context, o.PostTradespersonTradespersonIDAccessTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/customer/{stripeId}/subscription/{subscriptionId}/invoice/{invoiceId}/refund"] = NewPostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefund(o.context, o.PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionSubscriptionIDInvoiceInvoiceIDRefundHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/customer/{stripeId}/subscriptions/cancel"] = NewPostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancel(o.context, o.PostTradespersonTradespersonIDBillingCustomerStripeIDSubscriptionsCancelHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}/finalize"] = NewPostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalize(o.context, o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDFinalizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}/refund"] = NewPostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefund(o.context, o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDRefundHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}/uncollectible"] = NewPostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectible(o.context, o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDUncollectibleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}/void"] = NewPostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoid(o.context, o.PostTradespersonTradespersonIDBillingInvoiceInvoiceIDVoidHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/manual-invoice"] = NewPostTradespersonTradespersonIDBillingManualInvoice(o.context, o.PostTradespersonTradespersonIDBillingManualInvoiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/manual-invoice/{invoiceId}/refund"] = NewPostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefund(o.context, o.PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDRefundHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/manual-invoice/{invoiceId}/uncollectible"] = NewPostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectible(o.context, o.PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDUncollectibleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/manual-invoice/{invoiceId}/void"] = NewPostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoid(o.context, o.PostTradespersonTradespersonIDBillingManualInvoiceInvoiceIDVoidHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/cancel"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDCancel(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDCancelHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/finalize"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDFinalize(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDFinalizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId}/finalize"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalize(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDFinalizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId}/refund"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefund(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDRefundHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId}/uncollectible"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectible(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDUncollectibleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId}/void"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoid(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDVoidHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/revise"] = NewPostTradespersonTradespersonIDBillingQuoteQuoteIDRevise(o.context, o.PostTradespersonTradespersonIDBillingQuoteQuoteIDReviseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/coupon"] = NewPostTradespersonTradespersonIDCoupon(o.context, o.PostTradespersonTradespersonIDCouponHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/coupon/{couponId}/promo"] = NewPostTradespersonTradespersonIDCouponCouponIDPromo(o.context, o.PostTradespersonTradespersonIDCouponCouponIDPromoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/email"] = NewPostTradespersonTradespersonIDEmail(o.context, o.PostTradespersonTradespersonIDEmailHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/fixed-price"] = NewPostTradespersonTradespersonIDFixedPrice(o.context, o.PostTradespersonTradespersonIDFixedPriceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/fixed-price/review"] = NewPostTradespersonTradespersonIDFixedPriceReview(o.context, o.PostTradespersonTradespersonIDFixedPriceReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/google-token"] = NewPostTradespersonTradespersonIDGoogleToken(o.context, o.PostTradespersonTradespersonIDGoogleTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/logout"] = NewPostTradespersonTradespersonIDLogout(o.context, o.PostTradespersonTradespersonIDLogoutHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/quote"] = NewPostTradespersonTradespersonIDQuote(o.context, o.PostTradespersonTradespersonIDQuoteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/quote/review"] = NewPostTradespersonTradespersonIDQuoteReview(o.context, o.PostTradespersonTradespersonIDQuoteReviewHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/customer/{customerId}"] = NewPutCustomerCustomerID(o.context, o.PutCustomerCustomerIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}"] = NewPutTradespersonTradespersonID(o.context, o.PutTradespersonTradespersonIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/billing/invoice/{invoiceId}"] = NewPutTradespersonTradespersonIDBillingInvoiceInvoiceID(o.context, o.PutTradespersonTradespersonIDBillingInvoiceInvoiceIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}"] = NewPutTradespersonTradespersonIDBillingQuoteQuoteID(o.context, o.PutTradespersonTradespersonIDBillingQuoteQuoteIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/billing/quote/{quoteId}/invoice/{invoiceId}"] = NewPutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceID(o.context, o.PutTradespersonTradespersonIDBillingQuoteQuoteIDInvoiceInvoiceIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/branding"] = NewPutTradespersonTradespersonIDBranding(o.context, o.PutTradespersonTradespersonIDBrandingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/coupon/{couponId}"] = NewPutTradespersonTradespersonIDCouponCouponID(o.context, o.PutTradespersonTradespersonIDCouponCouponIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/fixed-price/{priceId}"] = NewPutTradespersonTradespersonIDFixedPricePriceID(o.context, o.PutTradespersonTradespersonIDFixedPricePriceIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/google-token"] = NewPutTradespersonTradespersonIDGoogleToken(o.context, o.PutTradespersonTradespersonIDGoogleTokenHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/profile"] = NewPutTradespersonTradespersonIDProfile(o.context, o.PutTradespersonTradespersonIDProfileHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/promo/{promoId}"] = NewPutTradespersonTradespersonIDPromoPromoID(o.context, o.PutTradespersonTradespersonIDPromoPromoIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/quote/{quoteId}"] = NewPutTradespersonTradespersonIDQuoteQuoteID(o.context, o.PutTradespersonTradespersonIDQuoteQuoteIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/settings"] = NewPutTradespersonTradespersonIDSettings(o.context, o.PutTradespersonTradespersonIDSettingsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/time-zone"] = NewPutTradespersonTradespersonIDTimeZone(o.context, o.PutTradespersonTradespersonIDTimeZoneHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RedbudWayAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *RedbudWayAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *RedbudWayAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *RedbudWayAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *RedbudWayAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
