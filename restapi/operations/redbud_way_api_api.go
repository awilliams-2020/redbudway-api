// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRedbudWayAPIAPI creates a new RedbudWayAPI instance
func NewRedbudWayAPIAPI(spec *loads.Document) *RedbudWayAPIAPI {
	return &RedbudWayAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DeleteTradespersonAccountTradespersonIDHandler: DeleteTradespersonAccountTradespersonIDHandlerFunc(func(params DeleteTradespersonAccountTradespersonIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonAccountTradespersonID has not yet been implemented")
		}),
		DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler: DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandlerFunc(func(params DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTradespersonTradespersonIDBillingCustomerSubscriptions has not yet been implemented")
		}),
		GetTradespersonAccountTradespersonIDHandler: GetTradespersonAccountTradespersonIDHandlerFunc(func(params GetTradespersonAccountTradespersonIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonAccountTradespersonID has not yet been implemented")
		}),
		GetTradespersonAccountTradespersonIDSettingsHandler: GetTradespersonAccountTradespersonIDSettingsHandlerFunc(func(params GetTradespersonAccountTradespersonIDSettingsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonAccountTradespersonIDSettings has not yet been implemented")
		}),
		GetTradespersonAccountTradespersonIDStatusHandler: GetTradespersonAccountTradespersonIDStatusHandlerFunc(func(params GetTradespersonAccountTradespersonIDStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonAccountTradespersonIDStatus has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler: GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandlerFunc(func(params GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoice has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler: GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandlerFunc(func(params GetTradespersonTradespersonIDBillingCustomerSubscriptionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingCustomerSubscriptions has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingCustomersHandler: GetTradespersonTradespersonIDBillingCustomersHandlerFunc(func(params GetTradespersonTradespersonIDBillingCustomersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingCustomers has not yet been implemented")
		}),
		GetTradespersonTradespersonIDBillingInvoicesHandler: GetTradespersonTradespersonIDBillingInvoicesHandlerFunc(func(params GetTradespersonTradespersonIDBillingInvoicesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDBillingInvoices has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPriceHandler: GetTradespersonTradespersonIDFixedPriceHandlerFunc(func(params GetTradespersonTradespersonIDFixedPriceParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPrice has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPriceReviewsHandler: GetTradespersonTradespersonIDFixedPriceReviewsHandlerFunc(func(params GetTradespersonTradespersonIDFixedPriceReviewsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPriceReviews has not yet been implemented")
		}),
		GetTradespersonTradespersonIDFixedPricesHandler: GetTradespersonTradespersonIDFixedPricesHandlerFunc(func(params GetTradespersonTradespersonIDFixedPricesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDFixedPrices has not yet been implemented")
		}),
		GetTradespersonTradespersonIDLoginLinkHandler: GetTradespersonTradespersonIDLoginLinkHandlerFunc(func(params GetTradespersonTradespersonIDLoginLinkParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDLoginLink has not yet been implemented")
		}),
		GetTradespersonTradespersonIDOnboardHandler: GetTradespersonTradespersonIDOnboardHandlerFunc(func(params GetTradespersonTradespersonIDOnboardParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDOnboard has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuoteHandler: GetTradespersonTradespersonIDQuoteHandlerFunc(func(params GetTradespersonTradespersonIDQuoteParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuote has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuoteReviewsHandler: GetTradespersonTradespersonIDQuoteReviewsHandlerFunc(func(params GetTradespersonTradespersonIDQuoteReviewsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuoteReviews has not yet been implemented")
		}),
		GetTradespersonTradespersonIDQuotesHandler: GetTradespersonTradespersonIDQuotesHandlerFunc(func(params GetTradespersonTradespersonIDQuotesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDQuotes has not yet been implemented")
		}),
		GetTradespersonTradespersonIDScheduleHandler: GetTradespersonTradespersonIDScheduleHandlerFunc(func(params GetTradespersonTradespersonIDScheduleParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDSchedule has not yet been implemented")
		}),
		GetTradespersonTradespersonIDTimeSlotsHandler: GetTradespersonTradespersonIDTimeSlotsHandlerFunc(func(params GetTradespersonTradespersonIDTimeSlotsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTradespersonTradespersonIDTimeSlots has not yet been implemented")
		}),
		PostForgotPasswordHandler: PostForgotPasswordHandlerFunc(func(params PostForgotPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PostForgotPassword has not yet been implemented")
		}),
		PostResetPasswordHandler: PostResetPasswordHandlerFunc(func(params PostResetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PostResetPassword has not yet been implemented")
		}),
		PostTradespersonAccountHandler: PostTradespersonAccountHandlerFunc(func(params PostTradespersonAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonAccount has not yet been implemented")
		}),
		PostTradespersonLoginHandler: PostTradespersonLoginHandlerFunc(func(params PostTradespersonLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonLogin has not yet been implemented")
		}),
		PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler: PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandlerFunc(func(params PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDBillingCustomerSubscriptionRefund has not yet been implemented")
		}),
		PostTradespersonTradespersonIDFixedPriceHandler: PostTradespersonTradespersonIDFixedPriceHandlerFunc(func(params PostTradespersonTradespersonIDFixedPriceParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDFixedPrice has not yet been implemented")
		}),
		PostTradespersonTradespersonIDFixedPriceReviewHandler: PostTradespersonTradespersonIDFixedPriceReviewHandlerFunc(func(params PostTradespersonTradespersonIDFixedPriceReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDFixedPriceReview has not yet been implemented")
		}),
		PostTradespersonTradespersonIDQuoteHandler: PostTradespersonTradespersonIDQuoteHandlerFunc(func(params PostTradespersonTradespersonIDQuoteParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDQuote has not yet been implemented")
		}),
		PostTradespersonTradespersonIDQuoteReviewHandler: PostTradespersonTradespersonIDQuoteReviewHandlerFunc(func(params PostTradespersonTradespersonIDQuoteReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTradespersonTradespersonIDQuoteReview has not yet been implemented")
		}),
		PutTradespersonAccountTradespersonIDHandler: PutTradespersonAccountTradespersonIDHandlerFunc(func(params PutTradespersonAccountTradespersonIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonAccountTradespersonID has not yet been implemented")
		}),
		PutTradespersonAccountTradespersonIDSettingsHandler: PutTradespersonAccountTradespersonIDSettingsHandlerFunc(func(params PutTradespersonAccountTradespersonIDSettingsParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonAccountTradespersonIDSettings has not yet been implemented")
		}),
		PutTradespersonTradespersonIDFixedPriceHandler: PutTradespersonTradespersonIDFixedPriceHandlerFunc(func(params PutTradespersonTradespersonIDFixedPriceParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDFixedPrice has not yet been implemented")
		}),
		PutTradespersonTradespersonIDQuoteHandler: PutTradespersonTradespersonIDQuoteHandlerFunc(func(params PutTradespersonTradespersonIDQuoteParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDQuote has not yet been implemented")
		}),
		PutTradespersonTradespersonIDUpdatePasswordHandler: PutTradespersonTradespersonIDUpdatePasswordHandlerFunc(func(params PutTradespersonTradespersonIDUpdatePasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTradespersonTradespersonIDUpdatePassword has not yet been implemented")
		}),
	}
}

/*RedbudWayAPIAPI API description in Markdown. */
type RedbudWayAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// DeleteTradespersonAccountTradespersonIDHandler sets the operation handler for the delete tradesperson account tradesperson ID operation
	DeleteTradespersonAccountTradespersonIDHandler DeleteTradespersonAccountTradespersonIDHandler
	// DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler sets the operation handler for the delete tradesperson tradesperson ID billing customer subscriptions operation
	DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler
	// GetTradespersonAccountTradespersonIDHandler sets the operation handler for the get tradesperson account tradesperson ID operation
	GetTradespersonAccountTradespersonIDHandler GetTradespersonAccountTradespersonIDHandler
	// GetTradespersonAccountTradespersonIDSettingsHandler sets the operation handler for the get tradesperson account tradesperson ID settings operation
	GetTradespersonAccountTradespersonIDSettingsHandler GetTradespersonAccountTradespersonIDSettingsHandler
	// GetTradespersonAccountTradespersonIDStatusHandler sets the operation handler for the get tradesperson account tradesperson ID status operation
	GetTradespersonAccountTradespersonIDStatusHandler GetTradespersonAccountTradespersonIDStatusHandler
	// GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler sets the operation handler for the get tradesperson tradesperson ID billing customer subscription invoice operation
	GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler
	// GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler sets the operation handler for the get tradesperson tradesperson ID billing customer subscriptions operation
	GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler
	// GetTradespersonTradespersonIDBillingCustomersHandler sets the operation handler for the get tradesperson tradesperson ID billing customers operation
	GetTradespersonTradespersonIDBillingCustomersHandler GetTradespersonTradespersonIDBillingCustomersHandler
	// GetTradespersonTradespersonIDBillingInvoicesHandler sets the operation handler for the get tradesperson tradesperson ID billing invoices operation
	GetTradespersonTradespersonIDBillingInvoicesHandler GetTradespersonTradespersonIDBillingInvoicesHandler
	// GetTradespersonTradespersonIDFixedPriceHandler sets the operation handler for the get tradesperson tradesperson ID fixed price operation
	GetTradespersonTradespersonIDFixedPriceHandler GetTradespersonTradespersonIDFixedPriceHandler
	// GetTradespersonTradespersonIDFixedPriceReviewsHandler sets the operation handler for the get tradesperson tradesperson ID fixed price reviews operation
	GetTradespersonTradespersonIDFixedPriceReviewsHandler GetTradespersonTradespersonIDFixedPriceReviewsHandler
	// GetTradespersonTradespersonIDFixedPricesHandler sets the operation handler for the get tradesperson tradesperson ID fixed prices operation
	GetTradespersonTradespersonIDFixedPricesHandler GetTradespersonTradespersonIDFixedPricesHandler
	// GetTradespersonTradespersonIDLoginLinkHandler sets the operation handler for the get tradesperson tradesperson ID login link operation
	GetTradespersonTradespersonIDLoginLinkHandler GetTradespersonTradespersonIDLoginLinkHandler
	// GetTradespersonTradespersonIDOnboardHandler sets the operation handler for the get tradesperson tradesperson ID onboard operation
	GetTradespersonTradespersonIDOnboardHandler GetTradespersonTradespersonIDOnboardHandler
	// GetTradespersonTradespersonIDQuoteHandler sets the operation handler for the get tradesperson tradesperson ID quote operation
	GetTradespersonTradespersonIDQuoteHandler GetTradespersonTradespersonIDQuoteHandler
	// GetTradespersonTradespersonIDQuoteReviewsHandler sets the operation handler for the get tradesperson tradesperson ID quote reviews operation
	GetTradespersonTradespersonIDQuoteReviewsHandler GetTradespersonTradespersonIDQuoteReviewsHandler
	// GetTradespersonTradespersonIDQuotesHandler sets the operation handler for the get tradesperson tradesperson ID quotes operation
	GetTradespersonTradespersonIDQuotesHandler GetTradespersonTradespersonIDQuotesHandler
	// GetTradespersonTradespersonIDScheduleHandler sets the operation handler for the get tradesperson tradesperson ID schedule operation
	GetTradespersonTradespersonIDScheduleHandler GetTradespersonTradespersonIDScheduleHandler
	// GetTradespersonTradespersonIDTimeSlotsHandler sets the operation handler for the get tradesperson tradesperson ID time slots operation
	GetTradespersonTradespersonIDTimeSlotsHandler GetTradespersonTradespersonIDTimeSlotsHandler
	// PostForgotPasswordHandler sets the operation handler for the post forgot password operation
	PostForgotPasswordHandler PostForgotPasswordHandler
	// PostResetPasswordHandler sets the operation handler for the post reset password operation
	PostResetPasswordHandler PostResetPasswordHandler
	// PostTradespersonAccountHandler sets the operation handler for the post tradesperson account operation
	PostTradespersonAccountHandler PostTradespersonAccountHandler
	// PostTradespersonLoginHandler sets the operation handler for the post tradesperson login operation
	PostTradespersonLoginHandler PostTradespersonLoginHandler
	// PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler sets the operation handler for the post tradesperson tradesperson ID billing customer subscription refund operation
	PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler
	// PostTradespersonTradespersonIDFixedPriceHandler sets the operation handler for the post tradesperson tradesperson ID fixed price operation
	PostTradespersonTradespersonIDFixedPriceHandler PostTradespersonTradespersonIDFixedPriceHandler
	// PostTradespersonTradespersonIDFixedPriceReviewHandler sets the operation handler for the post tradesperson tradesperson ID fixed price review operation
	PostTradespersonTradespersonIDFixedPriceReviewHandler PostTradespersonTradespersonIDFixedPriceReviewHandler
	// PostTradespersonTradespersonIDQuoteHandler sets the operation handler for the post tradesperson tradesperson ID quote operation
	PostTradespersonTradespersonIDQuoteHandler PostTradespersonTradespersonIDQuoteHandler
	// PostTradespersonTradespersonIDQuoteReviewHandler sets the operation handler for the post tradesperson tradesperson ID quote review operation
	PostTradespersonTradespersonIDQuoteReviewHandler PostTradespersonTradespersonIDQuoteReviewHandler
	// PutTradespersonAccountTradespersonIDHandler sets the operation handler for the put tradesperson account tradesperson ID operation
	PutTradespersonAccountTradespersonIDHandler PutTradespersonAccountTradespersonIDHandler
	// PutTradespersonAccountTradespersonIDSettingsHandler sets the operation handler for the put tradesperson account tradesperson ID settings operation
	PutTradespersonAccountTradespersonIDSettingsHandler PutTradespersonAccountTradespersonIDSettingsHandler
	// PutTradespersonTradespersonIDFixedPriceHandler sets the operation handler for the put tradesperson tradesperson ID fixed price operation
	PutTradespersonTradespersonIDFixedPriceHandler PutTradespersonTradespersonIDFixedPriceHandler
	// PutTradespersonTradespersonIDQuoteHandler sets the operation handler for the put tradesperson tradesperson ID quote operation
	PutTradespersonTradespersonIDQuoteHandler PutTradespersonTradespersonIDQuoteHandler
	// PutTradespersonTradespersonIDUpdatePasswordHandler sets the operation handler for the put tradesperson tradesperson ID update password operation
	PutTradespersonTradespersonIDUpdatePasswordHandler PutTradespersonTradespersonIDUpdatePasswordHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *RedbudWayAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *RedbudWayAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *RedbudWayAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RedbudWayAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RedbudWayAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RedbudWayAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RedbudWayAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RedbudWayAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RedbudWayAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RedbudWayAPIAPI
func (o *RedbudWayAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeleteTradespersonAccountTradespersonIDHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonAccountTradespersonIDHandler")
	}
	if o.DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler == nil {
		unregistered = append(unregistered, "DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler")
	}
	if o.GetTradespersonAccountTradespersonIDHandler == nil {
		unregistered = append(unregistered, "GetTradespersonAccountTradespersonIDHandler")
	}
	if o.GetTradespersonAccountTradespersonIDSettingsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonAccountTradespersonIDSettingsHandler")
	}
	if o.GetTradespersonAccountTradespersonIDStatusHandler == nil {
		unregistered = append(unregistered, "GetTradespersonAccountTradespersonIDStatusHandler")
	}
	if o.GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler")
	}
	if o.GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler")
	}
	if o.GetTradespersonTradespersonIDBillingCustomersHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingCustomersHandler")
	}
	if o.GetTradespersonTradespersonIDBillingInvoicesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDBillingInvoicesHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPriceHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPriceHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPriceReviewsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPriceReviewsHandler")
	}
	if o.GetTradespersonTradespersonIDFixedPricesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDFixedPricesHandler")
	}
	if o.GetTradespersonTradespersonIDLoginLinkHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDLoginLinkHandler")
	}
	if o.GetTradespersonTradespersonIDOnboardHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDOnboardHandler")
	}
	if o.GetTradespersonTradespersonIDQuoteHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuoteHandler")
	}
	if o.GetTradespersonTradespersonIDQuoteReviewsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuoteReviewsHandler")
	}
	if o.GetTradespersonTradespersonIDQuotesHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDQuotesHandler")
	}
	if o.GetTradespersonTradespersonIDScheduleHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDScheduleHandler")
	}
	if o.GetTradespersonTradespersonIDTimeSlotsHandler == nil {
		unregistered = append(unregistered, "GetTradespersonTradespersonIDTimeSlotsHandler")
	}
	if o.PostForgotPasswordHandler == nil {
		unregistered = append(unregistered, "PostForgotPasswordHandler")
	}
	if o.PostResetPasswordHandler == nil {
		unregistered = append(unregistered, "PostResetPasswordHandler")
	}
	if o.PostTradespersonAccountHandler == nil {
		unregistered = append(unregistered, "PostTradespersonAccountHandler")
	}
	if o.PostTradespersonLoginHandler == nil {
		unregistered = append(unregistered, "PostTradespersonLoginHandler")
	}
	if o.PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler")
	}
	if o.PostTradespersonTradespersonIDFixedPriceHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDFixedPriceHandler")
	}
	if o.PostTradespersonTradespersonIDFixedPriceReviewHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDFixedPriceReviewHandler")
	}
	if o.PostTradespersonTradespersonIDQuoteHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDQuoteHandler")
	}
	if o.PostTradespersonTradespersonIDQuoteReviewHandler == nil {
		unregistered = append(unregistered, "PostTradespersonTradespersonIDQuoteReviewHandler")
	}
	if o.PutTradespersonAccountTradespersonIDHandler == nil {
		unregistered = append(unregistered, "PutTradespersonAccountTradespersonIDHandler")
	}
	if o.PutTradespersonAccountTradespersonIDSettingsHandler == nil {
		unregistered = append(unregistered, "PutTradespersonAccountTradespersonIDSettingsHandler")
	}
	if o.PutTradespersonTradespersonIDFixedPriceHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDFixedPriceHandler")
	}
	if o.PutTradespersonTradespersonIDQuoteHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDQuoteHandler")
	}
	if o.PutTradespersonTradespersonIDUpdatePasswordHandler == nil {
		unregistered = append(unregistered, "PutTradespersonTradespersonIDUpdatePasswordHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RedbudWayAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RedbudWayAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *RedbudWayAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *RedbudWayAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *RedbudWayAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RedbudWayAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the redbud way API API
func (o *RedbudWayAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RedbudWayAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/account/{tradespersonId}"] = NewDeleteTradespersonAccountTradespersonID(o.context, o.DeleteTradespersonAccountTradespersonIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tradesperson/{tradespersonId}/billing/customer/subscriptions"] = NewDeleteTradespersonTradespersonIDBillingCustomerSubscriptions(o.context, o.DeleteTradespersonTradespersonIDBillingCustomerSubscriptionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/account/{tradespersonId}"] = NewGetTradespersonAccountTradespersonID(o.context, o.GetTradespersonAccountTradespersonIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/account/{tradespersonId}/settings"] = NewGetTradespersonAccountTradespersonIDSettings(o.context, o.GetTradespersonAccountTradespersonIDSettingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/account/{tradespersonId}/status"] = NewGetTradespersonAccountTradespersonIDStatus(o.context, o.GetTradespersonAccountTradespersonIDStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/customer/subscription/invoice"] = NewGetTradespersonTradespersonIDBillingCustomerSubscriptionInvoice(o.context, o.GetTradespersonTradespersonIDBillingCustomerSubscriptionInvoiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/customer/subscriptions"] = NewGetTradespersonTradespersonIDBillingCustomerSubscriptions(o.context, o.GetTradespersonTradespersonIDBillingCustomerSubscriptionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/customers"] = NewGetTradespersonTradespersonIDBillingCustomers(o.context, o.GetTradespersonTradespersonIDBillingCustomersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/billing/invoices"] = NewGetTradespersonTradespersonIDBillingInvoices(o.context, o.GetTradespersonTradespersonIDBillingInvoicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-price"] = NewGetTradespersonTradespersonIDFixedPrice(o.context, o.GetTradespersonTradespersonIDFixedPriceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-price/reviews"] = NewGetTradespersonTradespersonIDFixedPriceReviews(o.context, o.GetTradespersonTradespersonIDFixedPriceReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/fixed-prices"] = NewGetTradespersonTradespersonIDFixedPrices(o.context, o.GetTradespersonTradespersonIDFixedPricesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/login-link"] = NewGetTradespersonTradespersonIDLoginLink(o.context, o.GetTradespersonTradespersonIDLoginLinkHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/onboard"] = NewGetTradespersonTradespersonIDOnboard(o.context, o.GetTradespersonTradespersonIDOnboardHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quote"] = NewGetTradespersonTradespersonIDQuote(o.context, o.GetTradespersonTradespersonIDQuoteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quote/reviews"] = NewGetTradespersonTradespersonIDQuoteReviews(o.context, o.GetTradespersonTradespersonIDQuoteReviewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/quotes"] = NewGetTradespersonTradespersonIDQuotes(o.context, o.GetTradespersonTradespersonIDQuotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/schedule"] = NewGetTradespersonTradespersonIDSchedule(o.context, o.GetTradespersonTradespersonIDScheduleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tradesperson/{tradespersonId}/time-slots"] = NewGetTradespersonTradespersonIDTimeSlots(o.context, o.GetTradespersonTradespersonIDTimeSlotsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forgot-password"] = NewPostForgotPassword(o.context, o.PostForgotPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/reset-password"] = NewPostResetPassword(o.context, o.PostResetPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/account"] = NewPostTradespersonAccount(o.context, o.PostTradespersonAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/login"] = NewPostTradespersonLogin(o.context, o.PostTradespersonLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/billing/customer/subscription/refund"] = NewPostTradespersonTradespersonIDBillingCustomerSubscriptionRefund(o.context, o.PostTradespersonTradespersonIDBillingCustomerSubscriptionRefundHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/fixed-price"] = NewPostTradespersonTradespersonIDFixedPrice(o.context, o.PostTradespersonTradespersonIDFixedPriceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/fixed-price/review"] = NewPostTradespersonTradespersonIDFixedPriceReview(o.context, o.PostTradespersonTradespersonIDFixedPriceReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/quote"] = NewPostTradespersonTradespersonIDQuote(o.context, o.PostTradespersonTradespersonIDQuoteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tradesperson/{tradespersonId}/quote/review"] = NewPostTradespersonTradespersonIDQuoteReview(o.context, o.PostTradespersonTradespersonIDQuoteReviewHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/account/{tradespersonId}"] = NewPutTradespersonAccountTradespersonID(o.context, o.PutTradespersonAccountTradespersonIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/account/{tradespersonId}/settings"] = NewPutTradespersonAccountTradespersonIDSettings(o.context, o.PutTradespersonAccountTradespersonIDSettingsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/fixed-price"] = NewPutTradespersonTradespersonIDFixedPrice(o.context, o.PutTradespersonTradespersonIDFixedPriceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/quote"] = NewPutTradespersonTradespersonIDQuote(o.context, o.PutTradespersonTradespersonIDQuoteHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tradesperson/{tradespersonId}/update-password"] = NewPutTradespersonTradespersonIDUpdatePassword(o.context, o.PutTradespersonTradespersonIDUpdatePasswordHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RedbudWayAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *RedbudWayAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *RedbudWayAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *RedbudWayAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *RedbudWayAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
