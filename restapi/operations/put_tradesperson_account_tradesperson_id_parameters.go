// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPutTradespersonAccountTradespersonIDParams creates a new PutTradespersonAccountTradespersonIDParams object
//
// There are no default values defined in the spec.
func NewPutTradespersonAccountTradespersonIDParams() PutTradespersonAccountTradespersonIDParams {

	return PutTradespersonAccountTradespersonIDParams{}
}

// PutTradespersonAccountTradespersonIDParams contains all the bound params for the put tradesperson account tradesperson ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutTradespersonAccountTradespersonID
type PutTradespersonAccountTradespersonIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Description *string
	/*
	  In: query
	*/
	Image *string
	/*
	  In: query
	*/
	ProfileName *string
	/*
	  Required: true
	  In: path
	*/
	TradespersonID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutTradespersonAccountTradespersonIDParams() beforehand.
func (o *PutTradespersonAccountTradespersonIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDescription, qhkDescription, _ := qs.GetOK("description")
	if err := o.bindDescription(qDescription, qhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	qImage, qhkImage, _ := qs.GetOK("image")
	if err := o.bindImage(qImage, qhkImage, route.Formats); err != nil {
		res = append(res, err)
	}

	qProfileName, qhkProfileName, _ := qs.GetOK("profileName")
	if err := o.bindProfileName(qProfileName, qhkProfileName, route.Formats); err != nil {
		res = append(res, err)
	}

	rTradespersonID, rhkTradespersonID, _ := route.Params.GetOK("tradespersonId")
	if err := o.bindTradespersonID(rTradespersonID, rhkTradespersonID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDescription binds and validates parameter Description from query.
func (o *PutTradespersonAccountTradespersonIDParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Description = &raw

	return nil
}

// bindImage binds and validates parameter Image from query.
func (o *PutTradespersonAccountTradespersonIDParams) bindImage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Image = &raw

	return nil
}

// bindProfileName binds and validates parameter ProfileName from query.
func (o *PutTradespersonAccountTradespersonIDParams) bindProfileName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProfileName = &raw

	return nil
}

// bindTradespersonID binds and validates parameter TradespersonID from path.
func (o *PutTradespersonAccountTradespersonIDParams) bindTradespersonID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("tradespersonId", "path", "int64", raw)
	}
	o.TradespersonID = value

	return nil
}
