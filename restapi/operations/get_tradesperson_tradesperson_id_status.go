// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTradespersonTradespersonIDStatusHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID status handler
type GetTradespersonTradespersonIDStatusHandlerFunc func(GetTradespersonTradespersonIDStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDStatusHandlerFunc) Handle(params GetTradespersonTradespersonIDStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTradespersonTradespersonIDStatusHandler interface for that can handle valid get tradesperson tradesperson ID status params
type GetTradespersonTradespersonIDStatusHandler interface {
	Handle(GetTradespersonTradespersonIDStatusParams, interface{}) middleware.Responder
}

// NewGetTradespersonTradespersonIDStatus creates a new http.Handler for the get tradesperson tradesperson ID status operation
func NewGetTradespersonTradespersonIDStatus(ctx *middleware.Context, handler GetTradespersonTradespersonIDStatusHandler) *GetTradespersonTradespersonIDStatus {
	return &GetTradespersonTradespersonIDStatus{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDStatus swagger:route GET /tradesperson/{tradespersonId}/status getTradespersonTradespersonIdStatus

GetTradespersonTradespersonIDStatus get tradesperson tradesperson ID status API

*/
type GetTradespersonTradespersonIDStatus struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDStatusHandler
}

func (o *GetTradespersonTradespersonIDStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDStatusParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDStatusOKBody get tradesperson tradesperson ID status o k body
//
// swagger:model GetTradespersonTradespersonIDStatusOKBody
type GetTradespersonTradespersonIDStatusOKBody struct {

	// enabled
	Enabled bool `json:"enabled"`

	// submitted
	Submitted bool `json:"submitted"`
}

// Validate validates this get tradesperson tradesperson ID status o k body
func (o *GetTradespersonTradespersonIDStatusOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get tradesperson tradesperson ID status o k body based on context it is used
func (o *GetTradespersonTradespersonIDStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
