// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// PostCustomerCustomerIDFixedPricePriceIDBookHandlerFunc turns a function with the right signature into a post customer customer ID fixed price price ID book handler
type PostCustomerCustomerIDFixedPricePriceIDBookHandlerFunc func(PostCustomerCustomerIDFixedPricePriceIDBookParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCustomerCustomerIDFixedPricePriceIDBookHandlerFunc) Handle(params PostCustomerCustomerIDFixedPricePriceIDBookParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCustomerCustomerIDFixedPricePriceIDBookHandler interface for that can handle valid post customer customer ID fixed price price ID book params
type PostCustomerCustomerIDFixedPricePriceIDBookHandler interface {
	Handle(PostCustomerCustomerIDFixedPricePriceIDBookParams, interface{}) middleware.Responder
}

// NewPostCustomerCustomerIDFixedPricePriceIDBook creates a new http.Handler for the post customer customer ID fixed price price ID book operation
func NewPostCustomerCustomerIDFixedPricePriceIDBook(ctx *middleware.Context, handler PostCustomerCustomerIDFixedPricePriceIDBookHandler) *PostCustomerCustomerIDFixedPricePriceIDBook {
	return &PostCustomerCustomerIDFixedPricePriceIDBook{Context: ctx, Handler: handler}
}

/* PostCustomerCustomerIDFixedPricePriceIDBook swagger:route POST /customer/{customerId}/fixed-price/{priceId}/book postCustomerCustomerIdFixedPricePriceIdBook

PostCustomerCustomerIDFixedPricePriceIDBook post customer customer ID fixed price price ID book API

*/
type PostCustomerCustomerIDFixedPricePriceIDBook struct {
	Context *middleware.Context
	Handler PostCustomerCustomerIDFixedPricePriceIDBookHandler
}

func (o *PostCustomerCustomerIDFixedPricePriceIDBook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCustomerCustomerIDFixedPricePriceIDBookParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCustomerCustomerIDFixedPricePriceIDBookBody post customer customer ID fixed price price ID book body
//
// swagger:model PostCustomerCustomerIDFixedPricePriceIDBookBody
type PostCustomerCustomerIDFixedPricePriceIDBookBody struct {

	// time slots
	TimeSlots []*models.TimeSlot `json:"timeSlots"`
}

// Validate validates this post customer customer ID fixed price price ID book body
func (o *PostCustomerCustomerIDFixedPricePriceIDBookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerCustomerIDFixedPricePriceIDBookBody) validateTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.TimeSlots) { // not required
		return nil
	}

	for i := 0; i < len(o.TimeSlots); i++ {
		if swag.IsZero(o.TimeSlots[i]) { // not required
			continue
		}

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post customer customer ID fixed price price ID book body based on the context it is used
func (o *PostCustomerCustomerIDFixedPricePriceIDBookBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCustomerCustomerIDFixedPricePriceIDBookBody) contextValidateTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TimeSlots); i++ {

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("booking" + "." + "timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerCustomerIDFixedPricePriceIDBookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerCustomerIDFixedPricePriceIDBookBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerCustomerIDFixedPricePriceIDBookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody post customer customer ID fixed price price ID book created body
//
// swagger:model PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody
type PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody struct {

	// booked
	Booked bool `json:"booked"`
}

// Validate validates this post customer customer ID fixed price price ID book created body
func (o *PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post customer customer ID fixed price price ID book created body based on context it is used
func (o *PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostCustomerCustomerIDFixedPricePriceIDBookCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
