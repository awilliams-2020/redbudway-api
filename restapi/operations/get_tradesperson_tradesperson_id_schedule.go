// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redbudway-api/models"
)

// GetTradespersonTradespersonIDScheduleHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID schedule handler
type GetTradespersonTradespersonIDScheduleHandlerFunc func(GetTradespersonTradespersonIDScheduleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDScheduleHandlerFunc) Handle(params GetTradespersonTradespersonIDScheduleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTradespersonTradespersonIDScheduleHandler interface for that can handle valid get tradesperson tradesperson ID schedule params
type GetTradespersonTradespersonIDScheduleHandler interface {
	Handle(GetTradespersonTradespersonIDScheduleParams, interface{}) middleware.Responder
}

// NewGetTradespersonTradespersonIDSchedule creates a new http.Handler for the get tradesperson tradesperson ID schedule operation
func NewGetTradespersonTradespersonIDSchedule(ctx *middleware.Context, handler GetTradespersonTradespersonIDScheduleHandler) *GetTradespersonTradespersonIDSchedule {
	return &GetTradespersonTradespersonIDSchedule{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDSchedule swagger:route GET /tradesperson/{tradespersonId}/schedule getTradespersonTradespersonIdSchedule

GetTradespersonTradespersonIDSchedule get tradesperson tradesperson ID schedule API

*/
type GetTradespersonTradespersonIDSchedule struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDScheduleHandler
}

func (o *GetTradespersonTradespersonIDSchedule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDScheduleParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDScheduleOKBody get tradesperson tradesperson ID schedule o k body
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBody
type GetTradespersonTradespersonIDScheduleOKBody struct {

	// google time slots
	GoogleTimeSlots models.GoogleTimeSlots `json:"googleTimeSlots"`

	// services
	Services []*GetTradespersonTradespersonIDScheduleOKBodyServicesItems0 `json:"services"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body
func (o *GetTradespersonTradespersonIDScheduleOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGoogleTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBody) validateGoogleTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.GoogleTimeSlots) { // not required
		return nil
	}

	if err := o.GoogleTimeSlots.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "googleTimeSlots")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "googleTimeSlots")
		}
		return err
	}

	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBody) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(o.Services) { // not required
		return nil
	}

	for i := 0; i < len(o.Services); i++ {
		if swag.IsZero(o.Services[i]) { // not required
			continue
		}

		if o.Services[i] != nil {
			if err := o.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID schedule o k body based on the context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGoogleTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBody) contextValidateGoogleTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	if err := o.GoogleTimeSlots.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "googleTimeSlots")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "googleTimeSlots")
		}
		return err
	}

	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBody) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Services); i++ {

		if o.Services[i] != nil {
			if err := o.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTradespersonTradespersonIdScheduleOK" + "." + "services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDScheduleOKBodyServicesItems0 get tradesperson tradesperson ID schedule o k body services items0
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBodyServicesItems0
type GetTradespersonTradespersonIDScheduleOKBodyServicesItems0 struct {

	// interval
	Interval string `json:"interval,omitempty"`

	// price
	Price float64 `json:"price"`

	// subscription
	Subscription bool `json:"subscription"`

	// time slots
	TimeSlots []*GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0 `json:"timeSlots"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body services items0
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimeSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0) validateTimeSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.TimeSlots) { // not required
		return nil
	}

	for i := 0; i < len(o.TimeSlots); i++ {
		if swag.IsZero(o.TimeSlots[i]) { // not required
			continue
		}

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID schedule o k body services items0 based on the context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimeSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0) contextValidateTimeSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TimeSlots); i++ {

		if o.TimeSlots[i] != nil {
			if err := o.TimeSlots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBodyServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0 get tradesperson tradesperson ID schedule o k body services items0 time slots items0
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0
type GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0 struct {

	// customers
	Customers []*GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0 `json:"customers"`

	// end time
	EndTime string `json:"endTime,omitempty"`

	// start time
	StartTime string `json:"startTime,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body services items0 time slots items0
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0) validateCustomers(formats strfmt.Registry) error {
	if swag.IsZero(o.Customers) { // not required
		return nil
	}

	for i := 0; i < len(o.Customers); i++ {
		if swag.IsZero(o.Customers[i]) { // not required
			continue
		}

		if o.Customers[i] != nil {
			if err := o.Customers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID schedule o k body services items0 time slots items0 based on the context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0) contextValidateCustomers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Customers); i++ {

		if o.Customers[i] != nil {
			if err := o.Customers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0 get tradesperson tradesperson ID schedule o k body services items0 time slots items0 customers items0
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0
type GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0 struct {

	// info
	Info *models.Customer `json:"info,omitempty"`

	// invoice Id
	InvoiceID string `json:"invoiceId,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// stripe Id
	StripeID string `json:"stripeId,omitempty"`

	// subscription Id
	SubscriptionID string `json:"subscriptionId,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body services items0 time slots items0 customers items0
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.Info) { // not required
		return nil
	}

	if o.Info != nil {
		if err := o.Info.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID schedule o k body services items0 time slots items0 customers items0 based on the context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.Info != nil {
		if err := o.Info.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBodyServicesItems0TimeSlotsItems0CustomersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
