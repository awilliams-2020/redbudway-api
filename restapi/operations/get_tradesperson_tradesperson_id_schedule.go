// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTradespersonTradespersonIDScheduleHandlerFunc turns a function with the right signature into a get tradesperson tradesperson ID schedule handler
type GetTradespersonTradespersonIDScheduleHandlerFunc func(GetTradespersonTradespersonIDScheduleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradespersonTradespersonIDScheduleHandlerFunc) Handle(params GetTradespersonTradespersonIDScheduleParams) middleware.Responder {
	return fn(params)
}

// GetTradespersonTradespersonIDScheduleHandler interface for that can handle valid get tradesperson tradesperson ID schedule params
type GetTradespersonTradespersonIDScheduleHandler interface {
	Handle(GetTradespersonTradespersonIDScheduleParams) middleware.Responder
}

// NewGetTradespersonTradespersonIDSchedule creates a new http.Handler for the get tradesperson tradesperson ID schedule operation
func NewGetTradespersonTradespersonIDSchedule(ctx *middleware.Context, handler GetTradespersonTradespersonIDScheduleHandler) *GetTradespersonTradespersonIDSchedule {
	return &GetTradespersonTradespersonIDSchedule{Context: ctx, Handler: handler}
}

/* GetTradespersonTradespersonIDSchedule swagger:route GET /tradesperson/{tradespersonId}/schedule getTradespersonTradespersonIdSchedule

GetTradespersonTradespersonIDSchedule get tradesperson tradesperson ID schedule API

*/
type GetTradespersonTradespersonIDSchedule struct {
	Context *middleware.Context
	Handler GetTradespersonTradespersonIDScheduleHandler
}

func (o *GetTradespersonTradespersonIDSchedule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTradespersonTradespersonIDScheduleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTradespersonTradespersonIDScheduleOKBodyItems0 get tradesperson tradesperson ID schedule o k body items0
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBodyItems0
type GetTradespersonTradespersonIDScheduleOKBodyItems0 struct {

	// customer
	Customer *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer `json:"customer,omitempty"`

	// segment size
	SegmentSize string `json:"segmentSize,omitempty"`

	// start time
	// Format: date
	StartTime strfmt.Date `json:"startTime,omitempty"`

	// taken
	Taken bool `json:"taken,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body items0
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID schedule o k body items0 based on the context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {
		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDScheduleOKBodyItems0Customer get tradesperson tradesperson ID schedule o k body items0 customer
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBodyItems0Customer
type GetTradespersonTradespersonIDScheduleOKBodyItems0Customer struct {

	// address
	Address *GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress `json:"address,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body items0 customer
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.Address) { // not required
		return nil
	}

	if o.Address != nil {
		if err := o.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer" + "." + "address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get tradesperson tradesperson ID schedule o k body items0 customer based on the context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.Address != nil {
		if err := o.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer" + "." + "address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0Customer) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBodyItems0Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress get tradesperson tradesperson ID schedule o k body items0 customer address
//
// swagger:model GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress
type GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress struct {

	// city
	City string `json:"city,omitempty"`

	// line1
	Line1 string `json:"line1,omitempty"`

	// line2
	Line2 string `json:"line2,omitempty"`

	// postal code
	PostalCode string `json:"postal_code,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this get tradesperson tradesperson ID schedule o k body items0 customer address
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get tradesperson tradesperson ID schedule o k body items0 customer address based on context it is used
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress) UnmarshalBinary(b []byte) error {
	var res GetTradespersonTradespersonIDScheduleOKBodyItems0CustomerAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
